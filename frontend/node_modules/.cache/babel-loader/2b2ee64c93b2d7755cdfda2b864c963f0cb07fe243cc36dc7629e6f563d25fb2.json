{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { extractFaces, extractFaceTensors } from '../dom';\nimport { extendWithFaceLandmarks } from '../factories/WithFaceLandmarks';\nimport { ComposableTask } from './ComposableTask';\nimport { ComputeAllFaceDescriptorsTask, ComputeSingleFaceDescriptorTask } from './ComputeFaceDescriptorsTasks';\nimport { nets } from './nets';\nimport { PredictAllAgeAndGenderWithFaceAlignmentTask, PredictSingleAgeAndGenderWithFaceAlignmentTask } from './PredictAgeAndGenderTask';\nimport { PredictAllFaceExpressionsWithFaceAlignmentTask, PredictSingleFaceExpressionsWithFaceAlignmentTask } from './PredictFaceExpressionsTask';\nvar DetectFaceLandmarksTaskBase = /** @class */function (_super) {\n  __extends(DetectFaceLandmarksTaskBase, _super);\n  function DetectFaceLandmarksTaskBase(parentTask, input, useTinyLandmarkNet) {\n    var _this = _super.call(this) || this;\n    _this.parentTask = parentTask;\n    _this.input = input;\n    _this.useTinyLandmarkNet = useTinyLandmarkNet;\n    return _this;\n  }\n  Object.defineProperty(DetectFaceLandmarksTaskBase.prototype, \"landmarkNet\", {\n    get: function () {\n      return this.useTinyLandmarkNet ? nets.faceLandmark68TinyNet : nets.faceLandmark68Net;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DetectFaceLandmarksTaskBase;\n}(ComposableTask);\nexport { DetectFaceLandmarksTaskBase };\nvar DetectAllFaceLandmarksTask = /** @class */function (_super) {\n  __extends(DetectAllFaceLandmarksTask, _super);\n  function DetectAllFaceLandmarksTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DetectAllFaceLandmarksTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var parentResults, detections, faces, _a, faceLandmarksByFace;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.parentTask];\n          case 1:\n            parentResults = _b.sent();\n            detections = parentResults.map(function (res) {\n              return res.detection;\n            });\n            if (!(this.input instanceof tf.Tensor)) return [3 /*break*/, 3];\n            return [4 /*yield*/, extractFaceTensors(this.input, detections)];\n          case 2:\n            _a = _b.sent();\n            return [3 /*break*/, 5];\n          case 3:\n            return [4 /*yield*/, extractFaces(this.input, detections)];\n          case 4:\n            _a = _b.sent();\n            _b.label = 5;\n          case 5:\n            faces = _a;\n            return [4 /*yield*/, Promise.all(faces.map(function (face) {\n              return _this.landmarkNet.detectLandmarks(face);\n            }))];\n          case 6:\n            faceLandmarksByFace = _b.sent();\n            faces.forEach(function (f) {\n              return f instanceof tf.Tensor && f.dispose();\n            });\n            return [2 /*return*/, parentResults.map(function (parentResult, i) {\n              return extendWithFaceLandmarks(parentResult, faceLandmarksByFace[i]);\n            })];\n        }\n      });\n    });\n  };\n  DetectAllFaceLandmarksTask.prototype.withFaceExpressions = function () {\n    return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  };\n  DetectAllFaceLandmarksTask.prototype.withAgeAndGender = function () {\n    return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  };\n  DetectAllFaceLandmarksTask.prototype.withFaceDescriptors = function () {\n    return new ComputeAllFaceDescriptorsTask(this, this.input);\n  };\n  return DetectAllFaceLandmarksTask;\n}(DetectFaceLandmarksTaskBase);\nexport { DetectAllFaceLandmarksTask };\nvar DetectSingleFaceLandmarksTask = /** @class */function (_super) {\n  __extends(DetectSingleFaceLandmarksTask, _super);\n  function DetectSingleFaceLandmarksTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DetectSingleFaceLandmarksTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var parentResult, detection, faces, _a, landmarks;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.parentTask];\n          case 1:\n            parentResult = _b.sent();\n            if (!parentResult) {\n              return [2 /*return*/];\n            }\n            detection = parentResult.detection;\n            if (!(this.input instanceof tf.Tensor)) return [3 /*break*/, 3];\n            return [4 /*yield*/, extractFaceTensors(this.input, [detection])];\n          case 2:\n            _a = _b.sent();\n            return [3 /*break*/, 5];\n          case 3:\n            return [4 /*yield*/, extractFaces(this.input, [detection])];\n          case 4:\n            _a = _b.sent();\n            _b.label = 5;\n          case 5:\n            faces = _a;\n            return [4 /*yield*/, this.landmarkNet.detectLandmarks(faces[0])];\n          case 6:\n            landmarks = _b.sent();\n            faces.forEach(function (f) {\n              return f instanceof tf.Tensor && f.dispose();\n            });\n            return [2 /*return*/, extendWithFaceLandmarks(parentResult, landmarks)];\n        }\n      });\n    });\n  };\n  DetectSingleFaceLandmarksTask.prototype.withFaceExpressions = function () {\n    return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  };\n  DetectSingleFaceLandmarksTask.prototype.withAgeAndGender = function () {\n    return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  };\n  DetectSingleFaceLandmarksTask.prototype.withFaceDescriptor = function () {\n    return new ComputeSingleFaceDescriptorTask(this, this.input);\n  };\n  return DetectSingleFaceLandmarksTask;\n}(DetectFaceLandmarksTaskBase);\nexport { DetectSingleFaceLandmarksTask };\n//# sourceMappingURL=DetectFaceLandmarksTasks.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}