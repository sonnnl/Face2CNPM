{"ast":null,"code":"import{createSlice,createAsyncThunk}from\"@reduxjs/toolkit\";import axiosInstance from\"../../utils/axios\";// Thunks\nexport const fetchAllUsers=createAsyncThunk(\"admin/fetchAllUsers\",async(_ref,_ref2)=>{let{page=1,limit=10,search=\"\",role=\"\",status=\"\"}=_ref;let{getState,rejectWithValue}=_ref2;try{// Lấy danh sách người dùng\nconst usersResponse=await axiosInstance.get(`/users?page=${page}&limit=${limit}&search=${search}${role?`&role=${role}`:\"\"}${status?`&status=${status}`:\"\"}`);// Lấy thống kê người dùng\nconst statsResponse=await axiosInstance.get(\"/users/stats\");// Kết hợp kết quả\nreturn{...usersResponse.data,...statsResponse.data// Thêm dữ liệu thống kê từ API stats\n};}catch(error){var _error$response,_error$response$data;console.error(\"fetchAllUsers error:\",error);return rejectWithValue(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||\"Không thể lấy danh sách người dùng\");}});export const approveUser=createAsyncThunk(\"admin/approveUser\",async(userId,_ref3)=>{let{rejectWithValue}=_ref3;try{const response=await axiosInstance.put(`/users/${userId}/approve`,{});return{userId,data:response.data};}catch(error){var _error$response2,_error$response2$data;console.error(\"approveUser error:\",error);return rejectWithValue(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||\"Không thể phê duyệt người dùng\");}});export const rejectUser=createAsyncThunk(\"admin/rejectUser\",async(userId,_ref4)=>{let{rejectWithValue}=_ref4;try{const response=await axiosInstance.put(`/users/${userId}/reject`,{});return{userId,data:response.data};}catch(error){var _error$response3,_error$response3$data;console.error(\"rejectUser error:\",error);return rejectWithValue(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||\"Không thể từ chối người dùng\");}});export const updateUserRole=createAsyncThunk(\"admin/updateUserRole\",async(_ref5,_ref6)=>{let{userId,role}=_ref5;let{rejectWithValue}=_ref6;try{const response=await axiosInstance.put(`/users/${userId}/role`,{role});return{userId,role,data:response.data};}catch(error){var _error$response4,_error$response4$data;console.error(\"updateUserRole error:\",error);return rejectWithValue(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||\"Không thể cập nhật vai trò người dùng\");}});export const deleteUser=createAsyncThunk(\"admin/deleteUser\",async(userId,_ref7)=>{let{rejectWithValue}=_ref7;try{await axiosInstance.delete(`/users/${userId}`);return userId;}catch(error){var _error$response5,_error$response5$data;console.error(\"deleteUser error:\",error);return rejectWithValue(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||\"Không thể xóa người dùng\");}});// Initial state\nconst initialState={users:[],userStats:{totalUsers:0,students:0,teachers:0,pendingTeachers:0,pendingStudents:0},isLoading:false,error:null,pagination:{page:1,limit:10,totalPages:1,totalCount:0}};// Slice\nconst adminSlice=createSlice({name:\"admin\",initialState,reducers:{clearError:state=>{state.error=null;},resetAdminState:()=>initialState},extraReducers:builder=>{builder// Fetch All Users\n.addCase(fetchAllUsers.pending,state=>{state.isLoading=true;state.error=null;}).addCase(fetchAllUsers.fulfilled,(state,action)=>{state.isLoading=false;state.users=action.payload.data;// Cập nhật đúng thống kê từ response\nstate.userStats={totalUsers:action.payload.totalUsers||0,totalApprovedUsers:action.payload.totalApprovedUsers||0,students:action.payload.students||0,approvedStudents:action.payload.approvedStudents||0,teachers:action.payload.teachers||0,approvedTeachers:action.payload.approvedTeachers||0,pendingTeachers:action.payload.pendingTeachers||0,pendingStudents:action.payload.pendingStudents||0};state.pagination={page:action.payload.currentPage||1,limit:action.payload.limit||10,totalPages:action.payload.totalPages||1,totalCount:action.payload.total||0};}).addCase(fetchAllUsers.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;})// Approve User\n.addCase(approveUser.pending,state=>{state.isLoading=true;state.error=null;}).addCase(approveUser.fulfilled,(state,action)=>{var _state$users$find;state.isLoading=false;state.users=state.users.map(user=>user._id===action.payload.userId?{...user,status:\"approved\"}:user);// Cập nhật thống kê\nif(((_state$users$find=state.users.find(u=>u._id===action.payload.userId))===null||_state$users$find===void 0?void 0:_state$users$find.role)===\"teacher\"){state.userStats.pendingTeachers-=1;}else{state.userStats.pendingStudents-=1;}}).addCase(approveUser.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;})// Reject User\n.addCase(rejectUser.pending,state=>{state.isLoading=true;state.error=null;}).addCase(rejectUser.fulfilled,(state,action)=>{var _state$users$find2;state.isLoading=false;state.users=state.users.map(user=>user._id===action.payload.userId?{...user,status:\"rejected\"}:user);// Cập nhật thống kê\nif(((_state$users$find2=state.users.find(u=>u._id===action.payload.userId))===null||_state$users$find2===void 0?void 0:_state$users$find2.role)===\"teacher\"){state.userStats.pendingTeachers-=1;}else{state.userStats.pendingStudents-=1;}}).addCase(rejectUser.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;})// Update User Role\n.addCase(updateUserRole.pending,state=>{state.isLoading=true;state.error=null;}).addCase(updateUserRole.fulfilled,(state,action)=>{state.isLoading=false;state.users=state.users.map(user=>user._id===action.payload.userId?{...user,role:action.payload.role}:user);}).addCase(updateUserRole.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;})// Delete User\n.addCase(deleteUser.pending,state=>{state.isLoading=true;state.error=null;}).addCase(deleteUser.fulfilled,(state,action)=>{state.isLoading=false;state.users=state.users.filter(user=>user._id!==action.payload);state.userStats.totalUsers-=1;}).addCase(deleteUser.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;});}});export const{clearError,resetAdminState}=adminSlice.actions;export default adminSlice.reducer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}