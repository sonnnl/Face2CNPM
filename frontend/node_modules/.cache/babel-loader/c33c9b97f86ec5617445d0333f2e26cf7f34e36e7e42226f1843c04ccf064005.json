{"ast":null,"code":"import axios from \"axios\";\n\n// Thay đổi import từ config thành định nghĩa API_URL trực tiếp\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n/**\r\n * Service để quản lý các chức năng liên quan đến sinh viên\r\n */\nclass StudentService {\n  constructor() {\n    this.cache = {\n      classes: new Map(),\n      attendanceStats: new Map(),\n      attendanceDetails: new Map(),\n      classDetails: new Map(),\n      attendanceScores: new Map()\n    };\n    this.cacheExpiration = 5 * 60 * 1000; // 5 phút tính bằng ms\n  }\n\n  /**\r\n   * Tạo khóa cache duy nhất từ các tham số\r\n   * @param {Array} params - Các tham số để tạo khóa\r\n   * @returns {string} - Khóa cache duy nhất\r\n   */\n  _createCacheKey(params) {\n    return params.filter(p => p !== undefined).join(\"_\");\n  }\n\n  /**\r\n   * Kiểm tra xem cache có còn hợp lệ không\r\n   * @param {Object} cacheEntry - Mục cache cần kiểm tra\r\n   * @returns {boolean} - true nếu cache vẫn còn hợp lệ\r\n   */\n  _isCacheValid(cacheEntry) {\n    if (!cacheEntry) return false;\n    return Date.now() - cacheEntry.timestamp < this.cacheExpiration;\n  }\n\n  /**\r\n   * Lấy danh sách lớp học của sinh viên\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} token - JWT token\r\n   * @param {Object} options - Các tùy chọn tìm kiếm và phân trang\r\n   * @returns {Promise} - Kết quả lớp học\r\n   */\n  async getStudentClasses(studentId, token, options = {}) {\n    try {\n      const {\n        page = 1,\n        limit = 10,\n        search = \"\",\n        semester = \"\",\n        academicYear = \"\",\n        skipCache = false\n      } = options;\n\n      // Tạo khóa cache\n      const cacheKey = this._createCacheKey([\"classes\", studentId, page, limit, search, semester, academicYear]);\n\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\n      if (!skipCache) {\n        const cachedData = this.cache.classes.get(cacheKey);\n        if (this._isCacheValid(cachedData)) {\n          return cachedData.data;\n        }\n      }\n\n      // Xây dựng URL với URLSearchParams để tránh lỗi encoding\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n      });\n      if (search) params.append(\"search\", search);\n      if (semester) params.append(\"semester\", semester);\n      if (academicYear) params.append(\"academic_year\", academicYear);\n      const url = `${API_URL}/classes/teaching/student/${studentId}?${params.toString()}`;\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const result = {\n        success: true,\n        data: response.data.data || [],\n        total: response.data.count || 0\n      };\n\n      // Lưu vào cache\n      this.cache.classes.set(cacheKey, {\n        data: result,\n        timestamp: Date.now()\n      });\n      return result;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Lỗi khi lấy danh sách lớp học:\", error);\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Lỗi khi lấy danh sách lớp học\",\n        data: [],\n        total: 0\n      };\n    }\n  }\n\n  /**\r\n   * Lấy thống kê điểm danh của sinh viên trong một lớp học\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} classId - ID của lớp học\r\n   * @param {string} token - JWT token\r\n   * @param {boolean} skipCache - Có bỏ qua cache hay không\r\n   * @returns {Promise} - Kết quả thống kê điểm danh\r\n   */\n  async getAttendanceStats(studentId, classId, token, skipCache = false) {\n    try {\n      // Tạo khóa cache\n      const cacheKey = this._createCacheKey([\"stats\", studentId, classId]);\n\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\n      if (!skipCache) {\n        const cachedData = this.cache.attendanceStats.get(cacheKey);\n        if (this._isCacheValid(cachedData)) {\n          return cachedData.data;\n        }\n      }\n\n      // Lấy thông tin chi tiết về lớp học để biết tổng số buổi học\n      const classDetailResponse = await axios.get(`${API_URL}/classes/teaching/${classId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const classDetail = classDetailResponse.data.data || {};\n      const totalPlannedSessions = classDetail.total_sessions || 0;\n\n      // Lấy logs điểm danh (chỉ từ các phiên đã hoàn thành)\n      const response = await axios.get(`${API_URL}/attendance/student/${studentId}/logs?teaching_class=${classId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Tính toán thống kê\n      const logs = response.data.data || [];\n      const totalSessions = logs.length;\n\n      // Nếu có thông báo từ API là không có phiên điểm danh nào được hoàn thành\n      if (response.data.message && response.data.message.includes(\"Không có phiên điểm danh nào được hoàn thành\")) {\n        const result = {\n          success: true,\n          data: {\n            logs: [],\n            stats: {\n              total: 0,\n              present: 0,\n              absent: 0,\n              late: 0,\n              presentPercentage: 0,\n              latePercentage: 0,\n              absentPercentage: 0,\n              attendanceRate: 0,\n              totalPlannedSessions,\n              // Thêm thông tin này để hiển thị \"0 / 12\"\n              message: \"Chưa có buổi học nào được điểm danh\"\n            }\n          }\n        };\n\n        // Lưu vào cache\n        this.cache.attendanceStats.set(cacheKey, {\n          data: result,\n          timestamp: Date.now()\n        });\n        return result;\n      }\n\n      // Sử dụng reduce để tính toán trong một lần duyệt mảng\n      const counts = logs.reduce((acc, log) => {\n        if (log.status === \"present\") acc.present++;else if (log.status === \"late\") acc.late++;else if (log.status === \"absent\") acc.absent++;\n        return acc;\n      }, {\n        present: 0,\n        late: 0,\n        absent: 0\n      });\n      const {\n        present,\n        absent,\n        late\n      } = counts;\n\n      // Tính toán các tỷ lệ phần trăm\n      const presentPercentage = totalSessions > 0 ? present / totalSessions * 100 : 0;\n      const latePercentage = totalSessions > 0 ? late / totalSessions * 100 : 0;\n      const absentPercentage = totalSessions > 0 ? absent / totalSessions * 100 : 0;\n      const attendanceRate = totalSessions > 0 ? (present + late) / totalSessions * 100 : 0;\n      const result = {\n        success: true,\n        data: {\n          logs,\n          stats: {\n            total: totalSessions,\n            present,\n            absent,\n            late,\n            presentPercentage,\n            latePercentage,\n            absentPercentage,\n            attendanceRate,\n            totalPlannedSessions // Thêm vào để hiển thị \"x / 12\"\n          }\n        }\n      };\n\n      // Lưu vào cache\n      this.cache.attendanceStats.set(cacheKey, {\n        data: result,\n        timestamp: Date.now()\n      });\n      return result;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error(`Lỗi khi lấy thống kê điểm danh cho lớp ${classId}:`, error);\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Lỗi khi lấy thống kê điểm danh\",\n        data: {\n          logs: [],\n          stats: {\n            total: 0,\n            present: 0,\n            absent: 0,\n            late: 0,\n            presentPercentage: 0,\n            latePercentage: 0,\n            absentPercentage: 0,\n            attendanceRate: 0,\n            totalPlannedSessions: 0,\n            message: \"Lỗi khi lấy thống kê điểm danh\"\n          }\n        }\n      };\n    }\n  }\n\n  /**\r\n   * Lấy chi tiết điểm danh của sinh viên trong một lớp học\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} classId - ID của lớp học\r\n   * @param {string} token - JWT token\r\n   * @param {Object} options - Các tùy chọn tìm kiếm và phân trang\r\n   * @returns {Promise} - Kết quả chi tiết điểm danh\r\n   */\n  async getAttendanceDetails(studentId, classId, token, options = {}) {\n    try {\n      const {\n        page = 1,\n        limit = 10,\n        sortBy = \"date\",\n        sortOrder = \"desc\",\n        skipCache = false\n      } = options;\n\n      // Tạo khóa cache\n      const cacheKey = this._createCacheKey([\"details\", studentId, classId, page, limit, sortBy, sortOrder]);\n\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\n      if (!skipCache) {\n        const cachedData = this.cache.attendanceDetails.get(cacheKey);\n        if (this._isCacheValid(cachedData)) {\n          return cachedData.data;\n        }\n      }\n\n      // Sử dụng URLSearchParams để xây dựng URL\n      const params = new URLSearchParams({\n        teaching_class: classId,\n        page: page.toString(),\n        limit: limit.toString(),\n        sort: sortBy,\n        order: sortOrder\n      });\n      const url = `${API_URL}/attendance/student/${studentId}/logs?${params.toString()}`;\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const result = {\n        success: true,\n        data: response.data.data || [],\n        total: response.data.count || 0\n      };\n\n      // Lưu vào cache\n      this.cache.attendanceDetails.set(cacheKey, {\n        data: result,\n        timestamp: Date.now()\n      });\n      return result;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error(`Lỗi khi lấy chi tiết điểm danh cho lớp ${classId}:`, error);\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || \"Lỗi khi lấy chi tiết điểm danh\",\n        data: [],\n        total: 0\n      };\n    }\n  }\n\n  /**\r\n   * Lấy thông tin chi tiết của lớp học\r\n   * @param {string} classId - ID của lớp học\r\n   * @param {string} token - JWT token\r\n   * @param {boolean} skipCache - Có bỏ qua cache hay không\r\n   * @returns {Promise} - Kết quả chi tiết lớp học\r\n   */\n  async getClassDetail(classId, token, skipCache = false) {\n    try {\n      // Tạo khóa cache\n      const cacheKey = this._createCacheKey([\"class\", classId]);\n\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\n      if (!skipCache) {\n        const cachedData = this.cache.classDetails.get(cacheKey);\n        if (this._isCacheValid(cachedData)) {\n          return cachedData.data;\n        }\n      }\n\n      // Thử lấy thông tin từ endpoint chính\n      try {\n        const response = await axios.get(`${API_URL}/classes/${classId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const result = {\n          success: true,\n          data: response.data.data || {}\n        };\n\n        // Lưu vào cache\n        this.cache.classDetails.set(cacheKey, {\n          data: result,\n          timestamp: Date.now()\n        });\n        return result;\n      } catch (primaryError) {\n        var _primaryError$respons;\n        // Nếu endpoint chính không hoạt động, thử endpoint phụ\n        if (((_primaryError$respons = primaryError.response) === null || _primaryError$respons === void 0 ? void 0 : _primaryError$respons.status) === 404) {\n          const fallbackResponse = await axios.get(`${API_URL}/classes/teaching/${classId}`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const result = {\n            success: true,\n            data: fallbackResponse.data.data || {}\n          };\n\n          // Lưu vào cache\n          this.cache.classDetails.set(cacheKey, {\n            data: result,\n            timestamp: Date.now()\n          });\n          return result;\n        } else {\n          // Nếu không phải lỗi 404, ném lại lỗi ban đầu\n          throw primaryError;\n        }\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data, _error$response5;\n      console.error(`Lỗi khi lấy thông tin lớp học ${classId}:`, error);\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || \"Lỗi khi lấy thông tin lớp học\",\n        data: {},\n        statusCode: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status\n      };\n    }\n  }\n\n  /**\r\n   * Lấy điểm chuyên cần của sinh viên\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} token - JWT token\r\n   * @param {boolean} skipCache - Có bỏ qua cache hay không\r\n   * @returns {Promise} - Kết quả điểm chuyên cần\r\n   */\n  async getAttendanceScores(studentId, token, skipCache = false) {\n    try {\n      // Tạo khóa cache\n      const cacheKey = this._createCacheKey([\"scores\", studentId]);\n\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\n      if (!skipCache) {\n        const cachedData = this.cache.attendanceScores.get(cacheKey);\n        if (this._isCacheValid(cachedData)) {\n          return cachedData.data;\n        }\n      }\n      const response = await axios.get(`${API_URL}/attendance/student/${studentId}/scores`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const result = {\n        success: true,\n        data: response.data.data || []\n      };\n\n      // Lưu vào cache\n      this.cache.attendanceScores.set(cacheKey, {\n        data: result,\n        timestamp: Date.now()\n      });\n      return result;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error(`Lỗi khi lấy điểm chuyên cần:`, error);\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || \"Lỗi khi lấy điểm chuyên cần\",\n        data: []\n      };\n    }\n  }\n\n  /**\r\n   * Kiểm tra điều kiện dự thi dựa trên số buổi vắng\r\n   * @param {number} absentSessions - Số buổi vắng mặt\r\n   * @param {number} maxAbsentAllowed - Số buổi vắng tối đa được cho phép\r\n   * @returns {boolean} - Có đủ điều kiện dự thi hay không\r\n   */\n  checkExamEligibility(absentSessions, maxAbsentAllowed = 3) {\n    return absentSessions <= maxAbsentAllowed;\n  }\n\n  /**\r\n   * Xuất dữ liệu điểm danh ra file CSV\r\n   * @param {Array} logs - Mảng chứa log điểm danh\r\n   * @param {Object} classInfo - Thông tin về lớp học\r\n   * @returns {Object} - Kết quả xuất file\r\n   */\n  exportAttendanceToCSV(logs, classInfo) {\n    try {\n      var _classInfo$subject_id;\n      if (!logs || logs.length === 0) {\n        return {\n          success: false,\n          error: \"Không có dữ liệu điểm danh để xuất\"\n        };\n      }\n\n      // Tạo tiêu đề cho CSV\n      const headers = [\"Buổi học\", \"Ngày\", \"Trạng thái\", \"Thời gian điểm danh\", \"Ghi chú\"];\n\n      // Chuyển đổi logs thành dòng CSV\n      const rows = logs.map((log, index) => {\n        var _log$session_id, _log$session_id2;\n        const sessionNumber = ((_log$session_id = log.session_id) === null || _log$session_id === void 0 ? void 0 : _log$session_id.session_number) || index + 1;\n        const date = (_log$session_id2 = log.session_id) !== null && _log$session_id2 !== void 0 && _log$session_id2.date ? new Date(log.session_id.date).toLocaleDateString(\"vi-VN\") : \"N/A\";\n        const status = log.status === \"present\" ? \"Có mặt\" : log.status === \"absent\" ? \"Vắng mặt\" : log.status === \"late\" ? \"Đi muộn\" : \"Không xác định\";\n        const timestamp = log.timestamp ? new Date(log.timestamp).toLocaleString(\"vi-VN\") : \"N/A\";\n        const note = log.note || \"\";\n        return [sessionNumber, date, status, timestamp, note];\n      });\n\n      // Chuyển đổi thành CSV\n      const csvContent = [headers.join(\",\"), ...rows.map(row => row.join(\",\"))].join(\"\\n\");\n\n      // Tạo tên file\n      const className = (classInfo === null || classInfo === void 0 ? void 0 : classInfo.class_name) || \"attendance\";\n      const subjectCode = (classInfo === null || classInfo === void 0 ? void 0 : (_classInfo$subject_id = classInfo.subject_id) === null || _classInfo$subject_id === void 0 ? void 0 : _classInfo$subject_id.code) || \"\";\n      const fileName = `attendance_${className}_${subjectCode}_${new Date().toISOString().split(\"T\")[0]}.csv`;\n\n      // Tạo và tải file\n      const blob = new Blob([csvContent], {\n        type: \"text/csv;charset=utf-8;\"\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", fileName);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Lỗi khi xuất dữ liệu điểm danh:\", error);\n      return {\n        success: false,\n        error: \"Lỗi khi xuất dữ liệu điểm danh\"\n      };\n    }\n  }\n\n  /**\r\n   * Xóa cache cho một sinh viên cụ thể\r\n   * @param {string} studentId - ID của sinh viên\r\n   */\n  clearCache(studentId) {\n    // Xóa tất cả cache liên quan đến sinh viên này\n    for (const [key, cache] of Object.entries(this.cache)) {\n      for (const cacheKey of cache.keys()) {\n        if (cacheKey.includes(studentId)) {\n          cache.delete(cacheKey);\n        }\n      }\n    }\n  }\n\n  /**\r\n   * Tính điểm chuyên cần dựa trên số buổi vắng\r\n   * @param {number} absences - Số buổi vắng\r\n   * @returns {number} - Điểm chuyên cần (thang điểm 10)\r\n   */\n  calculateAttendanceScore(absences) {\n    // Trừ 2 điểm cho mỗi buổi vắng, tối đa 10 điểm\n    const score = Math.max(0, 10 - absences * 2);\n    return parseFloat(score.toFixed(1)); // Làm tròn đến 1 chữ số thập phân hiệu quả hơn\n  }\n\n  /**\r\n   * Xác định trạng thái điểm danh dựa trên tỷ lệ tham gia\r\n   * @param {Object} stats - Thống kê điểm danh\r\n   * @returns {Object} - Trạng thái tham gia và thông báo\r\n   */\n  getAttendanceStatus(stats) {\n    const rate = stats.attendanceRate || 0;\n    if (rate >= 80) {\n      return {\n        status: \"success\",\n        message: \"Tốt\"\n      };\n    } else if (rate >= 60) {\n      return {\n        status: \"warning\",\n        message: \"Cần cải thiện\"\n      };\n    } else {\n      return {\n        status: \"error\",\n        message: \"Nguy hiểm\"\n      };\n    }\n  }\n}\nexport default new StudentService();","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","StudentService","constructor","cache","classes","Map","attendanceStats","attendanceDetails","classDetails","attendanceScores","cacheExpiration","_createCacheKey","params","filter","p","undefined","join","_isCacheValid","cacheEntry","Date","now","timestamp","getStudentClasses","studentId","token","options","page","limit","search","semester","academicYear","skipCache","cacheKey","cachedData","get","data","URLSearchParams","toString","append","url","response","headers","Authorization","result","success","total","count","set","error","_error$response","_error$response$data","console","message","getAttendanceStats","classId","classDetailResponse","classDetail","totalPlannedSessions","total_sessions","logs","totalSessions","length","includes","stats","present","absent","late","presentPercentage","latePercentage","absentPercentage","attendanceRate","counts","reduce","acc","log","status","_error$response2","_error$response2$data","getAttendanceDetails","sortBy","sortOrder","teaching_class","sort","order","_error$response3","_error$response3$data","getClassDetail","primaryError","_primaryError$respons","fallbackResponse","_error$response4","_error$response4$data","_error$response5","statusCode","getAttendanceScores","_error$response6","_error$response6$data","checkExamEligibility","absentSessions","maxAbsentAllowed","exportAttendanceToCSV","classInfo","_classInfo$subject_id","rows","map","index","_log$session_id","_log$session_id2","sessionNumber","session_id","session_number","date","toLocaleDateString","toLocaleString","note","csvContent","row","className","class_name","subjectCode","subject_id","code","fileName","toISOString","split","blob","Blob","type","URL","createObjectURL","link","document","createElement","setAttribute","style","visibility","body","appendChild","click","removeChild","clearCache","key","Object","entries","keys","delete","calculateAttendanceScore","absences","score","Math","max","parseFloat","toFixed","getAttendanceStatus","rate"],"sources":["C:/Users/kasiz/Documents/Studying/FaceReg/frontend/src/services/studentService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Thay đổi import từ config thành định nghĩa API_URL trực tiếp\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n/**\r\n * Service để quản lý các chức năng liên quan đến sinh viên\r\n */\r\nclass StudentService {\r\n  constructor() {\r\n    this.cache = {\r\n      classes: new Map(),\r\n      attendanceStats: new Map(),\r\n      attendanceDetails: new Map(),\r\n      classDetails: new Map(),\r\n      attendanceScores: new Map(),\r\n    };\r\n    this.cacheExpiration = 5 * 60 * 1000; // 5 phút tính bằng ms\r\n  }\r\n\r\n  /**\r\n   * Tạo khóa cache duy nhất từ các tham số\r\n   * @param {Array} params - Các tham số để tạo khóa\r\n   * @returns {string} - Khóa cache duy nhất\r\n   */\r\n  _createCacheKey(params) {\r\n    return params.filter((p) => p !== undefined).join(\"_\");\r\n  }\r\n\r\n  /**\r\n   * Kiểm tra xem cache có còn hợp lệ không\r\n   * @param {Object} cacheEntry - Mục cache cần kiểm tra\r\n   * @returns {boolean} - true nếu cache vẫn còn hợp lệ\r\n   */\r\n  _isCacheValid(cacheEntry) {\r\n    if (!cacheEntry) return false;\r\n    return Date.now() - cacheEntry.timestamp < this.cacheExpiration;\r\n  }\r\n\r\n  /**\r\n   * Lấy danh sách lớp học của sinh viên\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} token - JWT token\r\n   * @param {Object} options - Các tùy chọn tìm kiếm và phân trang\r\n   * @returns {Promise} - Kết quả lớp học\r\n   */\r\n  async getStudentClasses(studentId, token, options = {}) {\r\n    try {\r\n      const {\r\n        page = 1,\r\n        limit = 10,\r\n        search = \"\",\r\n        semester = \"\",\r\n        academicYear = \"\",\r\n        skipCache = false,\r\n      } = options;\r\n\r\n      // Tạo khóa cache\r\n      const cacheKey = this._createCacheKey([\r\n        \"classes\",\r\n        studentId,\r\n        page,\r\n        limit,\r\n        search,\r\n        semester,\r\n        academicYear,\r\n      ]);\r\n\r\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\r\n      if (!skipCache) {\r\n        const cachedData = this.cache.classes.get(cacheKey);\r\n        if (this._isCacheValid(cachedData)) {\r\n          return cachedData.data;\r\n        }\r\n      }\r\n\r\n      // Xây dựng URL với URLSearchParams để tránh lỗi encoding\r\n      const params = new URLSearchParams({\r\n        page: page.toString(),\r\n        limit: limit.toString(),\r\n      });\r\n\r\n      if (search) params.append(\"search\", search);\r\n      if (semester) params.append(\"semester\", semester);\r\n      if (academicYear) params.append(\"academic_year\", academicYear);\r\n\r\n      const url = `${API_URL}/classes/teaching/student/${studentId}?${params.toString()}`;\r\n\r\n      const response = await axios.get(url, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      const result = {\r\n        success: true,\r\n        data: response.data.data || [],\r\n        total: response.data.count || 0,\r\n      };\r\n\r\n      // Lưu vào cache\r\n      this.cache.classes.set(cacheKey, {\r\n        data: result,\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error(\"Lỗi khi lấy danh sách lớp học:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || \"Lỗi khi lấy danh sách lớp học\",\r\n        data: [],\r\n        total: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lấy thống kê điểm danh của sinh viên trong một lớp học\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} classId - ID của lớp học\r\n   * @param {string} token - JWT token\r\n   * @param {boolean} skipCache - Có bỏ qua cache hay không\r\n   * @returns {Promise} - Kết quả thống kê điểm danh\r\n   */\r\n  async getAttendanceStats(studentId, classId, token, skipCache = false) {\r\n    try {\r\n      // Tạo khóa cache\r\n      const cacheKey = this._createCacheKey([\"stats\", studentId, classId]);\r\n\r\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\r\n      if (!skipCache) {\r\n        const cachedData = this.cache.attendanceStats.get(cacheKey);\r\n        if (this._isCacheValid(cachedData)) {\r\n          return cachedData.data;\r\n        }\r\n      }\r\n\r\n      // Lấy thông tin chi tiết về lớp học để biết tổng số buổi học\r\n      const classDetailResponse = await axios.get(\r\n        `${API_URL}/classes/teaching/${classId}`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n\r\n      const classDetail = classDetailResponse.data.data || {};\r\n      const totalPlannedSessions = classDetail.total_sessions || 0;\r\n\r\n      // Lấy logs điểm danh (chỉ từ các phiên đã hoàn thành)\r\n      const response = await axios.get(\r\n        `${API_URL}/attendance/student/${studentId}/logs?teaching_class=${classId}`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n\r\n      // Tính toán thống kê\r\n      const logs = response.data.data || [];\r\n      const totalSessions = logs.length;\r\n\r\n      // Nếu có thông báo từ API là không có phiên điểm danh nào được hoàn thành\r\n      if (\r\n        response.data.message &&\r\n        response.data.message.includes(\r\n          \"Không có phiên điểm danh nào được hoàn thành\"\r\n        )\r\n      ) {\r\n        const result = {\r\n          success: true,\r\n          data: {\r\n            logs: [],\r\n            stats: {\r\n              total: 0,\r\n              present: 0,\r\n              absent: 0,\r\n              late: 0,\r\n              presentPercentage: 0,\r\n              latePercentage: 0,\r\n              absentPercentage: 0,\r\n              attendanceRate: 0,\r\n              totalPlannedSessions, // Thêm thông tin này để hiển thị \"0 / 12\"\r\n              message: \"Chưa có buổi học nào được điểm danh\",\r\n            },\r\n          },\r\n        };\r\n\r\n        // Lưu vào cache\r\n        this.cache.attendanceStats.set(cacheKey, {\r\n          data: result,\r\n          timestamp: Date.now(),\r\n        });\r\n\r\n        return result;\r\n      }\r\n\r\n      // Sử dụng reduce để tính toán trong một lần duyệt mảng\r\n      const counts = logs.reduce(\r\n        (acc, log) => {\r\n          if (log.status === \"present\") acc.present++;\r\n          else if (log.status === \"late\") acc.late++;\r\n          else if (log.status === \"absent\") acc.absent++;\r\n          return acc;\r\n        },\r\n        { present: 0, late: 0, absent: 0 }\r\n      );\r\n\r\n      const { present, absent, late } = counts;\r\n\r\n      // Tính toán các tỷ lệ phần trăm\r\n      const presentPercentage =\r\n        totalSessions > 0 ? (present / totalSessions) * 100 : 0;\r\n      const latePercentage =\r\n        totalSessions > 0 ? (late / totalSessions) * 100 : 0;\r\n      const absentPercentage =\r\n        totalSessions > 0 ? (absent / totalSessions) * 100 : 0;\r\n      const attendanceRate =\r\n        totalSessions > 0 ? ((present + late) / totalSessions) * 100 : 0;\r\n\r\n      const result = {\r\n        success: true,\r\n        data: {\r\n          logs,\r\n          stats: {\r\n            total: totalSessions,\r\n            present,\r\n            absent,\r\n            late,\r\n            presentPercentage,\r\n            latePercentage,\r\n            absentPercentage,\r\n            attendanceRate,\r\n            totalPlannedSessions, // Thêm vào để hiển thị \"x / 12\"\r\n          },\r\n        },\r\n      };\r\n\r\n      // Lưu vào cache\r\n      this.cache.attendanceStats.set(cacheKey, {\r\n        data: result,\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error(\r\n        `Lỗi khi lấy thống kê điểm danh cho lớp ${classId}:`,\r\n        error\r\n      );\r\n      return {\r\n        success: false,\r\n        error:\r\n          error.response?.data?.message || \"Lỗi khi lấy thống kê điểm danh\",\r\n        data: {\r\n          logs: [],\r\n          stats: {\r\n            total: 0,\r\n            present: 0,\r\n            absent: 0,\r\n            late: 0,\r\n            presentPercentage: 0,\r\n            latePercentage: 0,\r\n            absentPercentage: 0,\r\n            attendanceRate: 0,\r\n            totalPlannedSessions: 0,\r\n            message: \"Lỗi khi lấy thống kê điểm danh\",\r\n          },\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lấy chi tiết điểm danh của sinh viên trong một lớp học\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} classId - ID của lớp học\r\n   * @param {string} token - JWT token\r\n   * @param {Object} options - Các tùy chọn tìm kiếm và phân trang\r\n   * @returns {Promise} - Kết quả chi tiết điểm danh\r\n   */\r\n  async getAttendanceDetails(studentId, classId, token, options = {}) {\r\n    try {\r\n      const {\r\n        page = 1,\r\n        limit = 10,\r\n        sortBy = \"date\",\r\n        sortOrder = \"desc\",\r\n        skipCache = false,\r\n      } = options;\r\n\r\n      // Tạo khóa cache\r\n      const cacheKey = this._createCacheKey([\r\n        \"details\",\r\n        studentId,\r\n        classId,\r\n        page,\r\n        limit,\r\n        sortBy,\r\n        sortOrder,\r\n      ]);\r\n\r\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\r\n      if (!skipCache) {\r\n        const cachedData = this.cache.attendanceDetails.get(cacheKey);\r\n        if (this._isCacheValid(cachedData)) {\r\n          return cachedData.data;\r\n        }\r\n      }\r\n\r\n      // Sử dụng URLSearchParams để xây dựng URL\r\n      const params = new URLSearchParams({\r\n        teaching_class: classId,\r\n        page: page.toString(),\r\n        limit: limit.toString(),\r\n        sort: sortBy,\r\n        order: sortOrder,\r\n      });\r\n\r\n      const url = `${API_URL}/attendance/student/${studentId}/logs?${params.toString()}`;\r\n\r\n      const response = await axios.get(url, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      const result = {\r\n        success: true,\r\n        data: response.data.data || [],\r\n        total: response.data.count || 0,\r\n      };\r\n\r\n      // Lưu vào cache\r\n      this.cache.attendanceDetails.set(cacheKey, {\r\n        data: result,\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error(\r\n        `Lỗi khi lấy chi tiết điểm danh cho lớp ${classId}:`,\r\n        error\r\n      );\r\n      return {\r\n        success: false,\r\n        error:\r\n          error.response?.data?.message || \"Lỗi khi lấy chi tiết điểm danh\",\r\n        data: [],\r\n        total: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lấy thông tin chi tiết của lớp học\r\n   * @param {string} classId - ID của lớp học\r\n   * @param {string} token - JWT token\r\n   * @param {boolean} skipCache - Có bỏ qua cache hay không\r\n   * @returns {Promise} - Kết quả chi tiết lớp học\r\n   */\r\n  async getClassDetail(classId, token, skipCache = false) {\r\n    try {\r\n      // Tạo khóa cache\r\n      const cacheKey = this._createCacheKey([\"class\", classId]);\r\n\r\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\r\n      if (!skipCache) {\r\n        const cachedData = this.cache.classDetails.get(cacheKey);\r\n        if (this._isCacheValid(cachedData)) {\r\n          return cachedData.data;\r\n        }\r\n      }\r\n\r\n      // Thử lấy thông tin từ endpoint chính\r\n      try {\r\n        const response = await axios.get(`${API_URL}/classes/${classId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n\r\n        const result = {\r\n          success: true,\r\n          data: response.data.data || {},\r\n        };\r\n\r\n        // Lưu vào cache\r\n        this.cache.classDetails.set(cacheKey, {\r\n          data: result,\r\n          timestamp: Date.now(),\r\n        });\r\n\r\n        return result;\r\n      } catch (primaryError) {\r\n        // Nếu endpoint chính không hoạt động, thử endpoint phụ\r\n        if (primaryError.response?.status === 404) {\r\n          const fallbackResponse = await axios.get(\r\n            `${API_URL}/classes/teaching/${classId}`,\r\n            {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            }\r\n          );\r\n\r\n          const result = {\r\n            success: true,\r\n            data: fallbackResponse.data.data || {},\r\n          };\r\n\r\n          // Lưu vào cache\r\n          this.cache.classDetails.set(cacheKey, {\r\n            data: result,\r\n            timestamp: Date.now(),\r\n          });\r\n\r\n          return result;\r\n        } else {\r\n          // Nếu không phải lỗi 404, ném lại lỗi ban đầu\r\n          throw primaryError;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`Lỗi khi lấy thông tin lớp học ${classId}:`, error);\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || \"Lỗi khi lấy thông tin lớp học\",\r\n        data: {},\r\n        statusCode: error.response?.status,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lấy điểm chuyên cần của sinh viên\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} token - JWT token\r\n   * @param {boolean} skipCache - Có bỏ qua cache hay không\r\n   * @returns {Promise} - Kết quả điểm chuyên cần\r\n   */\r\n  async getAttendanceScores(studentId, token, skipCache = false) {\r\n    try {\r\n      // Tạo khóa cache\r\n      const cacheKey = this._createCacheKey([\"scores\", studentId]);\r\n\r\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\r\n      if (!skipCache) {\r\n        const cachedData = this.cache.attendanceScores.get(cacheKey);\r\n        if (this._isCacheValid(cachedData)) {\r\n          return cachedData.data;\r\n        }\r\n      }\r\n\r\n      const response = await axios.get(\r\n        `${API_URL}/attendance/student/${studentId}/scores`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n\r\n      const result = {\r\n        success: true,\r\n        data: response.data.data || [],\r\n      };\r\n\r\n      // Lưu vào cache\r\n      this.cache.attendanceScores.set(cacheKey, {\r\n        data: result,\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error(`Lỗi khi lấy điểm chuyên cần:`, error);\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || \"Lỗi khi lấy điểm chuyên cần\",\r\n        data: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Kiểm tra điều kiện dự thi dựa trên số buổi vắng\r\n   * @param {number} absentSessions - Số buổi vắng mặt\r\n   * @param {number} maxAbsentAllowed - Số buổi vắng tối đa được cho phép\r\n   * @returns {boolean} - Có đủ điều kiện dự thi hay không\r\n   */\r\n  checkExamEligibility(absentSessions, maxAbsentAllowed = 3) {\r\n    return absentSessions <= maxAbsentAllowed;\r\n  }\r\n\r\n  /**\r\n   * Xuất dữ liệu điểm danh ra file CSV\r\n   * @param {Array} logs - Mảng chứa log điểm danh\r\n   * @param {Object} classInfo - Thông tin về lớp học\r\n   * @returns {Object} - Kết quả xuất file\r\n   */\r\n  exportAttendanceToCSV(logs, classInfo) {\r\n    try {\r\n      if (!logs || logs.length === 0) {\r\n        return {\r\n          success: false,\r\n          error: \"Không có dữ liệu điểm danh để xuất\",\r\n        };\r\n      }\r\n\r\n      // Tạo tiêu đề cho CSV\r\n      const headers = [\r\n        \"Buổi học\",\r\n        \"Ngày\",\r\n        \"Trạng thái\",\r\n        \"Thời gian điểm danh\",\r\n        \"Ghi chú\",\r\n      ];\r\n\r\n      // Chuyển đổi logs thành dòng CSV\r\n      const rows = logs.map((log, index) => {\r\n        const sessionNumber = log.session_id?.session_number || index + 1;\r\n        const date = log.session_id?.date\r\n          ? new Date(log.session_id.date).toLocaleDateString(\"vi-VN\")\r\n          : \"N/A\";\r\n        const status =\r\n          log.status === \"present\"\r\n            ? \"Có mặt\"\r\n            : log.status === \"absent\"\r\n            ? \"Vắng mặt\"\r\n            : log.status === \"late\"\r\n            ? \"Đi muộn\"\r\n            : \"Không xác định\";\r\n        const timestamp = log.timestamp\r\n          ? new Date(log.timestamp).toLocaleString(\"vi-VN\")\r\n          : \"N/A\";\r\n        const note = log.note || \"\";\r\n\r\n        return [sessionNumber, date, status, timestamp, note];\r\n      });\r\n\r\n      // Chuyển đổi thành CSV\r\n      const csvContent = [\r\n        headers.join(\",\"),\r\n        ...rows.map((row) => row.join(\",\")),\r\n      ].join(\"\\n\");\r\n\r\n      // Tạo tên file\r\n      const className = classInfo?.class_name || \"attendance\";\r\n      const subjectCode = classInfo?.subject_id?.code || \"\";\r\n      const fileName = `attendance_${className}_${subjectCode}_${\r\n        new Date().toISOString().split(\"T\")[0]\r\n      }.csv`;\r\n\r\n      // Tạo và tải file\r\n      const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.setAttribute(\"href\", url);\r\n      link.setAttribute(\"download\", fileName);\r\n      link.style.visibility = \"hidden\";\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error(\"Lỗi khi xuất dữ liệu điểm danh:\", error);\r\n      return {\r\n        success: false,\r\n        error: \"Lỗi khi xuất dữ liệu điểm danh\",\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Xóa cache cho một sinh viên cụ thể\r\n   * @param {string} studentId - ID của sinh viên\r\n   */\r\n  clearCache(studentId) {\r\n    // Xóa tất cả cache liên quan đến sinh viên này\r\n    for (const [key, cache] of Object.entries(this.cache)) {\r\n      for (const cacheKey of cache.keys()) {\r\n        if (cacheKey.includes(studentId)) {\r\n          cache.delete(cacheKey);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tính điểm chuyên cần dựa trên số buổi vắng\r\n   * @param {number} absences - Số buổi vắng\r\n   * @returns {number} - Điểm chuyên cần (thang điểm 10)\r\n   */\r\n  calculateAttendanceScore(absences) {\r\n    // Trừ 2 điểm cho mỗi buổi vắng, tối đa 10 điểm\r\n    const score = Math.max(0, 10 - absences * 2);\r\n    return parseFloat(score.toFixed(1)); // Làm tròn đến 1 chữ số thập phân hiệu quả hơn\r\n  }\r\n\r\n  /**\r\n   * Xác định trạng thái điểm danh dựa trên tỷ lệ tham gia\r\n   * @param {Object} stats - Thống kê điểm danh\r\n   * @returns {Object} - Trạng thái tham gia và thông báo\r\n   */\r\n  getAttendanceStatus(stats) {\r\n    const rate = stats.attendanceRate || 0;\r\n\r\n    if (rate >= 80) {\r\n      return { status: \"success\", message: \"Tốt\" };\r\n    } else if (rate >= 60) {\r\n      return { status: \"warning\", message: \"Cần cải thiện\" };\r\n    } else {\r\n      return { status: \"error\", message: \"Nguy hiểm\" };\r\n    }\r\n  }\r\n}\r\n\r\nexport default new StudentService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}