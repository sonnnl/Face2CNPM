{"ast":null,"code":"import{createSlice,createAsyncThunk}from\"@reduxjs/toolkit\";import axios from\"../../utils/axios\";import jwtDecode from\"jwt-decode\";const API_URL=process.env.REACT_APP_API_URL||\"http://localhost:5000/api\";// Thunks\nexport const login=createAsyncThunk(\"auth/login\",async(_ref,_ref2)=>{let{email,password}=_ref;let{rejectWithValue}=_ref2;try{const response=await axios.post(`${API_URL}/auth/login`,{email,password});return response.data;}catch(error){var _error$response,_error$response$data;return rejectWithValue(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||\"Đăng nhập thất bại\");}});export const register=createAsyncThunk(\"auth/register\",async(_ref3,_ref4)=>{let{email,password,full_name,role}=_ref3;let{rejectWithValue}=_ref4;try{const response=await axios.post(`${API_URL}/auth/register`,{email,password,full_name,role});return response.data;}catch(error){var _error$response2,_error$response2$data;return rejectWithValue(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||\"Đăng ký thất bại\");}});export const getCurrentUser=createAsyncThunk(\"auth/getCurrentUser\",async(_,_ref5)=>{let{rejectWithValue}=_ref5;try{const response=await axios.get(`${API_URL}/auth/me`);return response.data;}catch(error){var _error$response3,_error$response3$data;return rejectWithValue(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||\"Không thể lấy thông tin người dùng\");}});// Helpers\nconst isTokenExpired=token=>{if(!token)return true;try{const decoded=jwtDecode(token);return decoded.exp<Date.now()/1000;}catch(error){return true;}};// Initial state\nconst initialState={isAuthenticated:!!localStorage.getItem(\"token\"),token:localStorage.getItem(\"token\")||null,user:null,isLoading:false,error:null};// Slice\nconst authSlice=createSlice({name:\"auth\",initialState,reducers:{logout:state=>{state.isAuthenticated=false;state.token=null;state.user=null;localStorage.removeItem(\"token\");},clearError:state=>{state.error=null;},setCredentials:(state,action)=>{state.token=action.payload.token;state.user=action.payload.user;state.isAuthenticated=true;localStorage.setItem(\"token\",action.payload.token);},resetLoading:state=>{state.isLoading=false;}},extraReducers:builder=>{builder// Login\n.addCase(login.pending,state=>{state.isLoading=true;state.error=null;}).addCase(login.fulfilled,(state,action)=>{state.isLoading=false;state.token=action.payload.token;state.user=action.payload.user;state.isAuthenticated=true;localStorage.setItem(\"token\",action.payload.token);}).addCase(login.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;})// Register\n.addCase(register.pending,state=>{state.isLoading=true;state.error=null;}).addCase(register.fulfilled,(state,action)=>{state.isLoading=false;state.token=action.payload.token;state.user=action.payload.user;state.isAuthenticated=true;localStorage.setItem(\"token\",action.payload.token);}).addCase(register.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;})// Get Current User\n.addCase(getCurrentUser.pending,state=>{state.isLoading=true;}).addCase(getCurrentUser.fulfilled,(state,action)=>{state.isLoading=false;state.user=action.payload.data;}).addCase(getCurrentUser.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;if(action.payload&&action.payload.includes(\"Token\")){state.isAuthenticated=false;state.token=null;localStorage.removeItem(\"token\");}});}});export const{logout,clearError,setCredentials,resetLoading}=authSlice.actions;// Selectors\nexport const selectUser=state=>state.auth.user;export const selectIsAuthenticated=state=>state.auth.isAuthenticated;export const selectIsLoading=state=>state.auth.isLoading;export const selectError=state=>state.auth.error;export default authSlice.reducer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}