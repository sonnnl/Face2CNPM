{"ast":null,"code":"import axios from \"axios\";\n\n// Thay thế YOUR_BACKEND_PORT bằng port của backend server, ví dụ: 5000, 8000\nconst apiClient = axios.create({\n  baseURL: \"http://localhost:YOUR_BACKEND_PORT/api\" // VD: 'http://localhost:5000/api'\n  // headers: {\n  //   'Content-Type': 'application/json', // Có thể không cần nếu server tự nhận dạng\n  // }\n});\n\n// Function để lấy token từ localStorage\nconst getToken = () => localStorage.getItem(\"authToken\");\n\n// Request interceptor để tự động thêm token vào header\napiClient.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor để xử lý lỗi 401\nexport const setupAxiosInterceptors = navigate => {\n  apiClient.interceptors.response.use(response => {\n    return response;\n  }, error => {\n    if (error.response && error.response.status === 401) {\n      // Xóa token đã lưu\n      localStorage.removeItem(\"authToken\");\n\n      // Có thể dispatch một action để cập nhật state (ví dụ trong Redux/Context API)\n      // dispatch({ type: 'LOGOUT' });\n\n      // Điều hướng về trang login\n      // Kiểm tra xem người dùng có đang ở trang login không để tránh vòng lặp vô hạn\n      if (window.location.pathname !== \"/login\") {\n        // Truyền state để trang Login có thể hiển thị thông báo\n        navigate(\"/login\", {\n          replace: true,\n          state: {\n            message: \"Phiên đăng nhập đã hết hạn hoặc token không hợp lệ. Vui lòng đăng nhập lại.\"\n          }\n        });\n      }\n    }\n    // Quan trọng: Trả về Promise.reject(error) để các catch handler khác (nếu có) vẫn được thực thi\n    return Promise.reject(error);\n  });\n};\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","getToken","localStorage","getItem","interceptors","request","use","config","token","headers","Authorization","error","Promise","reject","setupAxiosInterceptors","navigate","response","status","removeItem","window","location","pathname","replace","state","message"],"sources":["C:/Users/kasiz/Documents/Studying/FaceReg/frontend/src/config/axiosConfig.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Thay thế YOUR_BACKEND_PORT bằng port của backend server, ví dụ: 5000, 8000\r\nconst apiClient = axios.create({\r\n  baseURL: \"http://localhost:YOUR_BACKEND_PORT/api\", // VD: 'http://localhost:5000/api'\r\n  // headers: {\r\n  //   'Content-Type': 'application/json', // Có thể không cần nếu server tự nhận dạng\r\n  // }\r\n});\r\n\r\n// Function để lấy token từ localStorage\r\nconst getToken = () => localStorage.getItem(\"authToken\");\r\n\r\n// Request interceptor để tự động thêm token vào header\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = getToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor để xử lý lỗi 401\r\nexport const setupAxiosInterceptors = (navigate) => {\r\n  apiClient.interceptors.response.use(\r\n    (response) => {\r\n      return response;\r\n    },\r\n    (error) => {\r\n      if (error.response && error.response.status === 401) {\r\n        // Xóa token đã lưu\r\n        localStorage.removeItem(\"authToken\");\r\n\r\n        // Có thể dispatch một action để cập nhật state (ví dụ trong Redux/Context API)\r\n        // dispatch({ type: 'LOGOUT' });\r\n\r\n        // Điều hướng về trang login\r\n        // Kiểm tra xem người dùng có đang ở trang login không để tránh vòng lặp vô hạn\r\n        if (window.location.pathname !== \"/login\") {\r\n          // Truyền state để trang Login có thể hiển thị thông báo\r\n          navigate(\"/login\", {\r\n            replace: true,\r\n            state: {\r\n              message:\r\n                \"Phiên đăng nhập đã hết hạn hoặc token không hợp lệ. Vui lòng đăng nhập lại.\",\r\n            },\r\n          });\r\n        }\r\n      }\r\n      // Quan trọng: Trả về Promise.reject(error) để các catch handler khác (nếu có) vẫn được thực thi\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n};\r\n\r\nexport default apiClient;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,wCAAwC,CAAE;EACnD;EACA;EACA;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAMC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;;AAExD;AACAL,SAAS,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGP,QAAQ,CAAC,CAAC;EACxB,IAAIO,KAAK,EAAE;IACTD,MAAM,CAACE,OAAO,CAACC,aAAa,GAAG,UAAUF,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMG,sBAAsB,GAAIC,QAAQ,IAAK;EAClDjB,SAAS,CAACM,YAAY,CAACY,QAAQ,CAACV,GAAG,CAChCU,QAAQ,IAAK;IACZ,OAAOA,QAAQ;EACjB,CAAC,EACAL,KAAK,IAAK;IACT,IAAIA,KAAK,CAACK,QAAQ,IAAIL,KAAK,CAACK,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACnD;MACAf,YAAY,CAACgB,UAAU,CAAC,WAAW,CAAC;;MAEpC;MACA;;MAEA;MACA;MACA,IAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,QAAQ,EAAE;QACzC;QACAN,QAAQ,CAAC,QAAQ,EAAE;UACjBO,OAAO,EAAE,IAAI;UACbC,KAAK,EAAE;YACLC,OAAO,EACL;UACJ;QACF,CAAC,CAAC;MACJ;IACF;IACA;IACA,OAAOZ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAC9B,CACF,CAAC;AACH,CAAC;AAED,eAAeb,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}