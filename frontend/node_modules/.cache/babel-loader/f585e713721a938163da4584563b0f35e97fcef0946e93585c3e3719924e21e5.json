{"ast":null,"code":"import axios from \"axios\";\nconst apiClient = axios.create({\n  baseURL: `http://localhost:${process.env.PORT}/api` // VD: 'http://localhost:5000/api'\n  // headers: {\n  //   'Content-Type': 'application/json', // Có thể không cần nếu server tự nhận dạng\n  // }\n});\n\n// Function để lấy token từ localStorage\nconst getToken = () => localStorage.getItem(\"authToken\");\n\n// Request interceptor để tự động thêm token vào header\napiClient.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor để xử lý lỗi 401\nexport const setupAxiosInterceptors = navigate => {\n  apiClient.interceptors.response.use(response => {\n    console.log(\"Interceptor: Response thành công\", response);\n    return response;\n  }, error => {\n    console.log(\"Interceptor: Bắt được lỗi\", error);\n    if (error.response) {\n      console.log(\"Interceptor: Lỗi có error.response\", error.response);\n      if (error.response.status === 401) {\n        console.log(\"Interceptor: Phát hiện lỗi 401 - Tiến hành xóa token và điều hướng\");\n        localStorage.removeItem(\"authToken\");\n        if (window.location.pathname !== \"/login\") {\n          navigate(\"/login\", {\n            replace: true,\n            state: {\n              message: \"Phiên đăng nhập đã hết hạn hoặc token không hợp lệ. Vui lòng đăng nhập lại.\"\n            }\n          });\n        }\n      } else {\n        console.log(\"Interceptor: Lỗi không phải 401, status: \", error.response.status);\n      }\n    } else {\n      console.log(\"Interceptor: Lỗi không có error.response (ví dụ: lỗi mạng)\", error.message);\n    }\n    return Promise.reject(error);\n  });\n};\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","PORT","getToken","localStorage","getItem","interceptors","request","use","config","token","headers","Authorization","error","Promise","reject","setupAxiosInterceptors","navigate","response","console","log","status","removeItem","window","location","pathname","replace","state","message"],"sources":["C:/Users/kasiz/Documents/Studying/FaceReg/frontend/src/config/axiosConfig.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: `http://localhost:${process.env.PORT}/api`, // VD: 'http://localhost:5000/api'\r\n  // headers: {\r\n  //   'Content-Type': 'application/json', // Có thể không cần nếu server tự nhận dạng\r\n  // }\r\n});\r\n\r\n// Function để lấy token từ localStorage\r\nconst getToken = () => localStorage.getItem(\"authToken\");\r\n\r\n// Request interceptor để tự động thêm token vào header\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = getToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor để xử lý lỗi 401\r\nexport const setupAxiosInterceptors = (navigate) => {\r\n  apiClient.interceptors.response.use(\r\n    (response) => {\r\n      console.log(\"Interceptor: Response thành công\", response);\r\n      return response;\r\n    },\r\n    (error) => {\r\n      console.log(\"Interceptor: Bắt được lỗi\", error);\r\n      if (error.response) {\r\n        console.log(\"Interceptor: Lỗi có error.response\", error.response);\r\n        if (error.response.status === 401) {\r\n          console.log(\r\n            \"Interceptor: Phát hiện lỗi 401 - Tiến hành xóa token và điều hướng\"\r\n          );\r\n          localStorage.removeItem(\"authToken\");\r\n          if (window.location.pathname !== \"/login\") {\r\n            navigate(\"/login\", {\r\n              replace: true,\r\n              state: {\r\n                message:\r\n                  \"Phiên đăng nhập đã hết hạn hoặc token không hợp lệ. Vui lòng đăng nhập lại.\",\r\n              },\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\r\n            \"Interceptor: Lỗi không phải 401, status: \",\r\n            error.response.status\r\n          );\r\n        }\r\n      } else {\r\n        console.log(\r\n          \"Interceptor: Lỗi không có error.response (ví dụ: lỗi mạng)\",\r\n          error.message\r\n        );\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n};\r\n\r\nexport default apiClient;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,oBAAoBC,OAAO,CAACC,GAAG,CAACC,IAAI,MAAM,CAAE;EACrD;EACA;EACA;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAMC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;;AAExD;AACAR,SAAS,CAACS,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGP,QAAQ,CAAC,CAAC;EACxB,IAAIO,KAAK,EAAE;IACTD,MAAM,CAACE,OAAO,CAACC,aAAa,GAAG,UAAUF,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMG,sBAAsB,GAAIC,QAAQ,IAAK;EAClDpB,SAAS,CAACS,YAAY,CAACY,QAAQ,CAACV,GAAG,CAChCU,QAAQ,IAAK;IACZC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEF,QAAQ,CAAC;IACzD,OAAOA,QAAQ;EACjB,CAAC,EACAL,KAAK,IAAK;IACTM,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEP,KAAK,CAAC;IAC/C,IAAIA,KAAK,CAACK,QAAQ,EAAE;MAClBC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEP,KAAK,CAACK,QAAQ,CAAC;MACjE,IAAIL,KAAK,CAACK,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QACjCF,OAAO,CAACC,GAAG,CACT,oEACF,CAAC;QACDhB,YAAY,CAACkB,UAAU,CAAC,WAAW,CAAC;QACpC,IAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,QAAQ,EAAE;UACzCR,QAAQ,CAAC,QAAQ,EAAE;YACjBS,OAAO,EAAE,IAAI;YACbC,KAAK,EAAE;cACLC,OAAO,EACL;YACJ;UACF,CAAC,CAAC;QACJ;MACF,CAAC,MAAM;QACLT,OAAO,CAACC,GAAG,CACT,2CAA2C,EAC3CP,KAAK,CAACK,QAAQ,CAACG,MACjB,CAAC;MACH;IACF,CAAC,MAAM;MACLF,OAAO,CAACC,GAAG,CACT,4DAA4D,EAC5DP,KAAK,CAACe,OACR,CAAC;IACH;IACA,OAAOd,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAC9B,CACF,CAAC;AACH,CAAC;AAED,eAAehB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}