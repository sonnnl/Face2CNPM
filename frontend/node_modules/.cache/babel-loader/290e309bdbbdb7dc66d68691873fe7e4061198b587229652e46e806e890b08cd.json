{"ast":null,"code":"import React,{useState,useEffect,useRef}from\"react\";import{useParams,useNavigate}from\"react-router-dom\";import{useDispatch,useSelector}from\"react-redux\";import{useSnackbar}from\"notistack\";import{Box,Typography,Card,CardContent,Grid,Paper,Button,Divider,CircularProgress,List,ListItem,ListItemAvatar,ListItemText,Avatar,Chip,Dialog,DialogTitle,DialogContent,DialogActions,TextField,FormControl,InputLabel,Select,MenuItem,IconButton,Alert,AlertTitle}from\"@mui/material\";import{CameraAlt,Check,Close,Edit,Refresh,Save,VerifiedUser,HourglassEmpty,ArrowBack}from\"@mui/icons-material\";import Webcam from\"react-webcam\";import*as faceapi from\"face-api.js\";import{getClassFaceFeatures,verifyAttendance,manualAttendance,setModelLoaded,setCameraReady,setDetectedFaces,setRecognizedStudents,clearRecognitionState}from\"../../redux/slices/faceRecognitionSlice\";import axios from\"axios\";import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const API_URL=process.env.REACT_APP_API_URL||\"http://localhost:5000/api\";const AttendancePage=()=>{const{classId,sessionId}=useParams();const navigate=useNavigate();const dispatch=useDispatch();const{enqueueSnackbar}=useSnackbar();const webcamRef=useRef(null);const canvasRef=useRef(null);const videoRef=useRef(null);const[intervalId,setIntervalId]=useState(null);const[showLandmark,setShowLandmark]=useState(true);const[landmarkIntervalId,setLandmarkIntervalId]=useState(null);const[cameraMode,setCameraMode]=useState(\"face_recognition\");const{token}=useSelector(state=>state.auth);const{isModelLoaded,isCameraReady,detectedFaces,recognizedStudents,classStudents,isProcessing,error}=useSelector(state=>state.faceRecognition);const[classInfo,setClassInfo]=useState(null);const[sessionInfo,setSessionInfo]=useState(null);const[attendanceLogs,setAttendanceLogs]=useState([]);const[isLoading,setIsLoading]=useState(true);const[isRecognizing,setIsRecognizing]=useState(false);const[isAutoMode,setIsAutoMode]=useState(false);const[selectedStudent,setSelectedStudent]=useState(null);const[manualDialogOpen,setManualDialogOpen]=useState(false);const[manualAttendanceData,setManualAttendanceData]=useState({status:\"present\",note:\"\"});// Các hằng số cấu hình được tối ưu\nconst RECOGNITION_THRESHOLD=0.45;// Ngưỡng nhận diện được tối ưu\nconst DETECTION_THRESHOLD=0.5;// Ngưỡng phát hiện khuôn mặt\nconst CONFIDENCE_THRESHOLD=0.6;// Ngưỡng độ tin cậy để điểm danh\nconst AUTO_DETECT_INTERVAL=1000;// Thời gian giữa các lần phát hiện (ms)\nconst ENABLE_DEBUG_LOGS=false;// Tắt log gỡ lỗi trong môi trường sản phẩm\n// Thêm state mới để theo dõi số lần thử lại camera\nconst[cameraRetryCount,setCameraRetryCount]=useState(0);const[lastDetectionTime,setLastDetectionTime]=useState(null);// Thêm state theo dõi interval phát hiện landmarks\nconst[landmarkDetectionInterval,setLandmarkDetectionInterval]=useState(null);// Load class info, session info và models\nuseEffect(()=>{const loadInitialData=async()=>{try{setIsLoading(true);// Lấy thông tin lớp học\nconst classPromise=axios.get(`${API_URL}/classes/teaching/${classId}`,{headers:{Authorization:`Bearer ${token}`}});// Lấy thông tin phiên điểm danh\nconst sessionPromise=axios.get(`${API_URL}/attendance/sessions/${sessionId}`,{headers:{Authorization:`Bearer ${token}`}});// Lấy danh sách điểm danh\nconst logsPromise=axios.get(`${API_URL}/attendance/logs/${sessionId}`,{headers:{Authorization:`Bearer ${token}`}});// Chờ tất cả API calls hoàn thành\nconst[classResponse,sessionResponse,logsResponse]=await Promise.all([classPromise,sessionPromise,logsPromise]);setClassInfo(classResponse.data.data);setSessionInfo(sessionResponse.data.data);setAttendanceLogs(logsResponse.data.data);// Đã tải xong dữ liệu cơ bản\nsetIsLoading(false);// Tải model nhận diện nếu chưa tải\nif(!isModelLoaded){const modelLoaded=await loadFaceRecognitionModels();if(modelLoaded){dispatch(setModelLoaded(true));}}if(sessionResponse.data.data.status!==\"completed\"){// Lấy đặc trưng khuôn mặt của sinh viên trong lớp\ntry{await dispatch(getClassFaceFeatures(classId)).unwrap();}catch(apiError){console.error(\"Lỗi khi lấy dữ liệu khuôn mặt:\",apiError);enqueueSnackbar(\"Lỗi khi lấy dữ liệu khuôn mặt. Vui lòng kiểm tra lại.\",{variant:\"error\"});}}// Khởi tạo thời gian phát hiện ban đầu\nsetLastDetectionTime(Date.now());}catch(error){console.error(\"Lỗi khi tải dữ liệu:\",error);enqueueSnackbar(\"Lỗi khi tải dữ liệu\",{variant:\"error\"});setIsLoading(false);}};loadInitialData();// Clean up\nreturn()=>{if(intervalId){clearInterval(intervalId);}// Dừng landmark interval nếu đang chạy\nif(landmarkIntervalId){clearInterval(landmarkIntervalId);}// Dừng camera stream nếu đang chạy\nif(webcamRef.current&&webcamRef.current.video&&webcamRef.current.video.srcObject){const tracks=webcamRef.current.video.srcObject.getTracks();tracks.forEach(track=>track.stop());}if(videoRef.current&&videoRef.current.srcObject){const tracks=videoRef.current.srcObject.getTracks();tracks.forEach(track=>track.stop());}dispatch(clearRecognitionState());// Reset các state theo dõi camera\nsetCameraRetryCount(0);setLastDetectionTime(null);};},[classId,sessionId,token,dispatch,enqueueSnackbar,isModelLoaded,intervalId,landmarkIntervalId]);// Hàm tối ưu để tải model nhận diện khuôn mặt\nconst loadFaceRecognitionModels=async()=>{try{const MODEL_URL=\"/models\";// Kiểm tra nhanh xem các models đã được tải chưa\nif(faceapi.nets.tinyFaceDetector.isLoaded&&faceapi.nets.faceLandmark68Net.isLoaded&&faceapi.nets.faceRecognitionNet.isLoaded&&faceapi.nets.ssdMobilenetv1.isLoaded){console.log(\"Các models đã được tải từ trước\");dispatch(setModelLoaded(true));return true;}// Hiển thị thông báo đang tải\nenqueueSnackbar(\"Đang tải mô hình nhận diện...\",{variant:\"info\"});// Tải song song tất cả model\nawait Promise.all([faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL)]);dispatch(setModelLoaded(true));enqueueSnackbar(\"Tải mô hình nhận diện thành công\",{variant:\"success\"});return true;}catch(error){console.error(\"Lỗi khi tải mô hình:\",error);enqueueSnackbar(\"Không thể tải mô hình nhận diện\",{variant:\"error\"});return false;}};// Hàm khởi tạo camera đã tối ưu\nconst initDirectCamera=async()=>{try{var _webcamRef$current;// Hiển thị thông báo đang khởi tạo\nenqueueSnackbar(\"Đang khởi tạo camera...\",{variant:\"info\"});// Tải model nếu chưa tải\nif(!isModelLoaded){const modelLoaded=await loadFaceRecognitionModels();if(!modelLoaded){enqueueSnackbar(\"Không thể tải mô hình nhận diện. Vui lòng thử lại.\",{variant:\"error\"});return false;}}// Dừng stream cũ nếu có\nconst stopExistingStream=videoElement=>{if(videoElement!==null&&videoElement!==void 0&&videoElement.srcObject){const tracks=videoElement.srcObject.getTracks();tracks.forEach(track=>track.stop());}};stopExistingStream((_webcamRef$current=webcamRef.current)===null||_webcamRef$current===void 0?void 0:_webcamRef$current.video);stopExistingStream(videoRef.current);// Cấu hình camera tối ưu\nconst constraints={video:{width:{ideal:640,min:320},height:{ideal:480,min:240},facingMode:\"user\",frameRate:{ideal:24,min:15}},audio:false};// Truy cập camera\ntry{const stream=await navigator.mediaDevices.getUserMedia(constraints);// Xử lý stream video\nconst setupVideoStream=videoElement=>{if(!videoElement)return false;videoElement.srcObject=stream;videoElement.onloadedmetadata=()=>{videoElement.play().catch(err=>console.error(\"Lỗi khi play video:\",err));};return true;};// Thiết lập stream cho webcam hoặc video element\nlet streamSetupSuccess=false;if(webcamRef.current&&webcamRef.current.video){streamSetupSuccess=setupVideoStream(webcamRef.current.video);}else if(videoRef.current){streamSetupSuccess=setupVideoStream(videoRef.current);}if(!streamSetupSuccess){throw new Error(\"Không thể thiết lập video stream\");}// Đánh dấu camera đã sẵn sàng\ndispatch(setCameraReady(true));setLastDetectionTime(Date.now());setCameraRetryCount(0);// Bật hiển thị landmark\nsetTimeout(()=>{setShowLandmark(true);startLandmarkDetection();},1000);enqueueSnackbar(\"Đã kết nối camera thành công\",{variant:\"success\"});return true;}catch(err){console.error(\"Lỗi truy cập camera:\",err);// Thử phương án thay thế nếu lỗi\nif(cameraRetryCount<2){try{var _webcamRef$current2;enqueueSnackbar(\"Đang thử kết nối với camera thay thế...\",{variant:\"info\"});const altStream=await navigator.mediaDevices.getUserMedia({video:true,audio:false});if((_webcamRef$current2=webcamRef.current)!==null&&_webcamRef$current2!==void 0&&_webcamRef$current2.video){webcamRef.current.video.srcObject=altStream;}else if(videoRef.current){videoRef.current.srcObject=altStream;videoRef.current.onloadedmetadata=()=>videoRef.current.play();}dispatch(setCameraReady(true));setLastDetectionTime(Date.now());setCameraRetryCount(prev=>prev+1);enqueueSnackbar(\"Đã kết nối camera thay thế\",{variant:\"success\"});return true;}catch(altErr){console.error(\"Không thể sử dụng camera thay thế:\",altErr);}}enqueueSnackbar(`Không thể truy cập camera: ${err.message}`,{variant:\"error\"});return false;}}catch(err){console.error(\"Lỗi khi khởi tạo camera:\",err);enqueueSnackbar(`Lỗi: ${err.message}`,{variant:\"error\"});return false;}};// Hàm bắt đầu phát hiện landmarks theo thời gian thực\nconst startLandmarkDetection=()=>{// Xóa interval cũ nếu có\nif(landmarkDetectionInterval){clearInterval(landmarkDetectionInterval);}// Tạo interval mới để cập nhật landmarks mỗi 50ms\nconst intervalId=setInterval(()=>{if(cameraMode===\"face_recognition\"&&showLandmark){handleDetectFaces(true);}},50);setLandmarkDetectionInterval(intervalId);};// Hàm dừng phát hiện landmarks theo thời gian thực\nconst stopLandmarkDetection=()=>{if(landmarkDetectionInterval){clearInterval(landmarkDetectionInterval);setLandmarkDetectionInterval(null);}};// Cập nhật useEffect để bắt đầu và dừng phát hiện landmarks khi camera hoặc chế độ thay đổi\nuseEffect(()=>{if(cameraMode===\"face_recognition\"&&showLandmark){startLandmarkDetection();}else{stopLandmarkDetection();}return()=>{stopLandmarkDetection();};},[cameraMode,showLandmark]);// Cập nhật useEffect cho việc toggle showLandmark\nuseEffect(()=>{if(showLandmark&&cameraMode===\"face_recognition\"){startLandmarkDetection();}else{stopLandmarkDetection();}},[showLandmark]);// Hàm kiểm tra và đảm bảo camera hoạt động\nconst ensureCameraIsWorking=()=>{var _webcamRef$current3;// Kiểm tra nếu camera chưa hoạt động và đã thử khởi động\nif(!isCameraReady&&cameraRetryCount===0){console.log(\"[DEBUG] Camera chưa sẵn sàng, thử khởi động\");setCameraRetryCount(1);initDirectCamera();return false;}// Kiểm tra stream của camera\nconst videoElement=isAutoMode?videoRef.current:(_webcamRef$current3=webcamRef.current)===null||_webcamRef$current3===void 0?void 0:_webcamRef$current3.video;if(!videoElement||!videoElement.srcObject||videoElement.readyState!==4){console.log(\"[DEBUG] Video stream không hoạt động, thử khởi động lại camera\");if(cameraRetryCount<3){setCameraRetryCount(prev=>prev+1);initDirectCamera();return false;}}return true;};// Tối ưu hàm phát hiện khuôn mặt\nconst handleDetectFaces=async function(){var _webcamRef$current4;let landmarkOnly=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(cameraMode!==\"face_recognition\"||!faceapi||!canvasRef.current)return[];// Xác định video element hiện tại\nconst videoElement=isAutoMode?videoRef.current:(_webcamRef$current4=webcamRef.current)===null||_webcamRef$current4===void 0?void 0:_webcamRef$current4.video;// Kiểm tra video element\nif(!videoElement||videoElement.readyState!==4||videoElement.videoWidth===0||videoElement.videoHeight===0){return[];}const canvasElement=canvasRef.current;// Đặt kích thước canvas\nconst displaySize={width:videoElement.videoWidth,height:videoElement.videoHeight};faceapi.matchDimensions(canvasElement,displaySize);try{// Sử dụng TinyFaceDetector nhanh hơn để phát hiện khuôn mặt với landmarks\nlet detections=await faceapi.detectAllFaces(videoElement,new faceapi.TinyFaceDetectorOptions({scoreThreshold:DETECTION_THRESHOLD,inputSize:320})).withFaceLandmarks();// Nếu chỉ cần vẽ landmarks, không cần trích xuất descriptor\nif(landmarkOnly){if(detections.length>0){// Điều chỉnh kết quả theo kích thước canvas\nconst resizedDetections=faceapi.resizeResults(detections,{width:canvasElement.width,height:canvasElement.height});// Vẽ landmarks\ndrawFaceLandmarks(resizedDetections,canvasElement);}else{// Xóa canvas nếu không phát hiện khuôn mặt\ncanvasElement.getContext(\"2d\").clearRect(0,0,canvasElement.width,canvasElement.height);}return detections;}// Nếu cần nhận diện đầy đủ, trích xuất thêm descriptors\nif(detections.length>0){var _finalDetections;// Thêm descriptors\nlet finalDetections;try{finalDetections=await faceapi.detectAllFaces(videoElement,new faceapi.TinyFaceDetectorOptions({scoreThreshold:DETECTION_THRESHOLD,inputSize:320})).withFaceLandmarks().withFaceDescriptors();// Nếu không có kết quả hoặc descriptor không hợp lệ, thử dùng SSD MobileNet\nif((finalDetections.length===0||!finalDetections[0].descriptor)&&faceapi.nets.ssdMobilenetv1.isLoaded){finalDetections=await faceapi.detectAllFaces(videoElement,new faceapi.SsdMobilenetv1Options({minConfidence:DETECTION_THRESHOLD})).withFaceLandmarks().withFaceDescriptors();}}catch(error){console.error(\"Lỗi khi lấy mô tả khuôn mặt:\",error);finalDetections=detections;}// Lọc kết quả hợp lệ\nfinalDetections=((_finalDetections=finalDetections)===null||_finalDetections===void 0?void 0:_finalDetections.filter(det=>{var _det$detection,_det$detection$box,_det$detection2,_det$detection2$box;return(det===null||det===void 0?void 0:(_det$detection=det.detection)===null||_det$detection===void 0?void 0:(_det$detection$box=_det$detection.box)===null||_det$detection$box===void 0?void 0:_det$detection$box._x)!=null&&(det===null||det===void 0?void 0:(_det$detection2=det.detection)===null||_det$detection2===void 0?void 0:(_det$detection2$box=_det$detection2.box)===null||_det$detection2$box===void 0?void 0:_det$detection2$box._y)!=null;}))||[];if(finalDetections.length>0){// Điều chỉnh kích thước và vẽ landmarks\nconst resizedDetections=faceapi.resizeResults(finalDetections,{width:canvasElement.width,height:canvasElement.height});// Vẽ landmarks nếu được bật\nif(showLandmark){drawFaceLandmarks(resizedDetections,canvasElement);}// Xử lý nhận diện\nhandleFaceDetection(resizedDetections);return resizedDetections;}}// Xóa canvas nếu không có kết quả\ncanvasElement.getContext(\"2d\").clearRect(0,0,canvasElement.width,canvasElement.height);return[];}catch(error){console.error(\"Lỗi khi phát hiện khuôn mặt:\",error);canvasElement.getContext(\"2d\").clearRect(0,0,canvasElement.width,canvasElement.height);return[];}};// Hàm vẽ landmarks mới, tách biệt và tối ưu\nconst drawFaceLandmarks=(detections,canvas)=>{const ctx=canvas.getContext(\"2d\");ctx.clearRect(0,0,canvas.width,canvas.height);detections.forEach(detection=>{const{_box:box}=detection.detection||{};const landmarks=detection.landmarks;if(!box||!(landmarks!==null&&landmarks!==void 0&&landmarks.positions)||box._x==null||box._y==null)return;// Vẽ hộp giới hạn khuôn mặt\nctx.strokeStyle=\"#00FF00\";ctx.lineWidth=2;ctx.strokeRect(box._x,box._y,box._width,box._height);// Hiển thị thông tin\nctx.fillStyle=\"#FFFFFF\";ctx.font=\"16px Arial\";ctx.fillText(\"Đã phát hiện khuôn mặt\",box._x,box._y+box._height+20);// Viền cho chữ\nctx.strokeStyle=\"#000000\";ctx.lineWidth=0.5;ctx.strokeText(\"Đã phát hiện khuôn mặt\",box._x,box._y+box._height+20);const points=landmarks.positions;if(!points||points.length<68)return;// Hàm vẽ nhóm điểm\nconst drawPoints=(startIdx,endIdx,color)=>{ctx.fillStyle=color;for(let i=startIdx;i<=endIdx;i++){var _points$i,_points$i2;if(((_points$i=points[i])===null||_points$i===void 0?void 0:_points$i.x)!=null&&((_points$i2=points[i])===null||_points$i2===void 0?void 0:_points$i2.y)!=null){ctx.beginPath();ctx.arc(points[i].x,points[i].y,2,0,2*Math.PI);ctx.fill();}}};// Vẽ các điểm landmarks\ndrawPoints(36,41,\"#FF0000\");// Mắt trái (đỏ)\ndrawPoints(42,47,\"#0000FF\");// Mắt phải (xanh dương)\ndrawPoints(27,35,\"#FFFF00\");// Mũi (vàng)\ndrawPoints(48,67,\"#FF00FF\");// Miệng (tím)\ndrawPoints(0,26,\"#00FF00\");// Viền khuôn mặt (xanh lá)\n});};// Hàm trích xuất descriptor từ sinh viên, tối ưu hoá và chỉ phải làm một lần\nconst extractStudentDescriptors=student=>{var _student$faceFeatures;if(!student)return[];const descriptors=[];// Kiểm tra cấu trúc mới\nif((_student$faceFeatures=student.faceFeatures)!==null&&_student$faceFeatures!==void 0&&_student$faceFeatures.descriptors){const featuresData=student.faceFeatures.descriptors;// Duyệt qua tất cả cấu trúc lồng nhau để tìm mảng 128 phần tử\nconst findDescriptorsInArray=function(arr){let maxDepth=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;let depth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;if(!Array.isArray(arr)||depth>maxDepth)return;if(arr.length===128&&arr.every(val=>typeof val===\"number\")){descriptors.push(arr);return;}for(const item of arr){if(Array.isArray(item)){findDescriptorsInArray(item,maxDepth,depth+1);}}};findDescriptorsInArray(featuresData);}// Kiểm tra cấu trúc cũ\nif(descriptors.length===0&&student.faceDescriptors){const oldFeatures=student.faceDescriptors;if(Array.isArray(oldFeatures)){// Trường hợp 1: mảng các descriptor\nfor(const item of oldFeatures){if(Array.isArray(item)&&item.length===128){descriptors.push(item);}// Trường hợp 2: mảng các object chứa descriptor\nelse if(typeof item===\"object\"&&item!==null){// Tìm trong các thuộc tính của object\nfor(const key in item){const value=item[key];if(Array.isArray(value)&&value.length===128&&value.every(v=>typeof v===\"number\")){descriptors.push(value);}// Tìm trong thuộc tính descriptors\nelse if(key===\"descriptors\"&&Array.isArray(value)){value.forEach(desc=>{if(Array.isArray(desc)&&desc.length===128){descriptors.push(desc);}});}}}}}}return descriptors;};// Xử lý phát hiện khuôn mặt\nconst handleFaceDetection=async detections=>{// Cập nhật state\ndispatch(setDetectedFaces(detections));try{// Cập nhật thời gian phát hiện\nsetLastDetectionTime(Date.now());// Nếu không có khuôn mặt nào được phát hiện, dừng lại\nif(!detections||detections.length===0){if(ENABLE_DEBUG_LOGS){console.log(\"[DEBUG] Không phát hiện khuôn mặt\");}return;}if(ENABLE_DEBUG_LOGS){console.log(`[DEBUG] Đã phát hiện ${detections.length} khuôn mặt`);}// Xử lý nhận diện khuôn mặt nếu có sinh viên\nif(classStudents&&classStudents.length>0){// Xử lý nhận diện khuôn mặt sẽ được thêm sau\n}}catch(error){console.error(\"Lỗi khi xử lý khuôn mặt:\",error);}};// Điểm danh thủ công\nconst openManualAttendanceDialog=student=>{if(!student){enqueueSnackbar(\"Không tìm thấy thông tin sinh viên\",{variant:\"error\"});return;}setSelectedStudent(student);setManualAttendanceData({status:\"present\",// Mặc định là có mặt\nnote:\"\"});setManualDialogOpen(true);};const handleManualDialogClose=()=>{setManualDialogOpen(false);};const handleManualAttendanceChange=e=>{setManualAttendanceData({...manualAttendanceData,[e.target.name]:e.target.value});};const handleManualAttendanceSubmit=async()=>{if(!selectedStudent)return;try{// Hiển thị thông báo đang xử lý\nenqueueSnackbar(\"Đang xử lý điểm danh thủ công...\",{variant:\"info\"});// Gọi API điểm danh thủ công\nconst result=await dispatch(manualAttendance({sessionId,studentId:selectedStudent._id,status:manualAttendanceData.status,note:manualAttendanceData.note})).unwrap();// Nếu điểm danh thành công\nif(result!==null&&result!==void 0&&result.data){// Cập nhật logs điểm danh hiệu quả hơn\nsetAttendanceLogs(prevLogs=>{// Lọc bỏ log cũ của sinh viên nếu có\nconst filteredLogs=prevLogs.filter(log=>log.student_id._id!==selectedStudent._id);// Thêm log mới\nreturn[...filteredLogs,{...result.data,student_id:selectedStudent}];});enqueueSnackbar(`Đã điểm danh ${manualAttendanceData.status===\"present\"?\"có mặt\":manualAttendanceData.status===\"absent\"?\"vắng mặt\":manualAttendanceData.status===\"late\"?\"đi trễ\":\"về sớm\"} cho ${selectedStudent.full_name}`,{variant:\"success\"});// Đóng dialog\nhandleManualDialogClose();// Cập nhật thông tin phiên\nfetchSessionInfo();}}catch(error){console.error(\"Lỗi khi điểm danh thủ công:\",error);enqueueSnackbar(\"Lỗi khi điểm danh thủ công\",{variant:\"error\"});}};// Đánh dấu điểm danh từ nhận diện khuôn mặt\nconst markAttendance=async(studentId,faceDescriptor,confidence,imageBase64)=>{try{// Hiển thị thông báo đang xử lý\nenqueueSnackbar(\"Đang xử lý điểm danh...\",{variant:\"info\"});// Gọi API điểm danh qua Redux\nconst result=await dispatch(verifyAttendance({sessionId,studentId,faceDescriptor,confidence,imageBase64})).unwrap();// Nếu điểm danh thành công\nif(result!==null&&result!==void 0&&result.data){// Tìm thông tin sinh viên\nconst student=classStudents.find(s=>s._id===studentId);if(student){// Cập nhật logs điểm danh hiệu quả hơn\nsetAttendanceLogs(prevLogs=>{// Lọc bỏ log cũ của sinh viên nếu có\nconst filteredLogs=prevLogs.filter(log=>log.student_id._id!==studentId);// Thêm log mới\nreturn[...filteredLogs,{...result.data,student_id:student}];});enqueueSnackbar(`Đã điểm danh cho ${student.full_name}`,{variant:\"success\"});}// Cập nhật thông tin phiên một cách bất đồng bộ\nfetchSessionInfo();return true;}return false;}catch(error){console.error(\"Lỗi khi xác nhận điểm danh:\",error);enqueueSnackbar(\"Lỗi khi xác nhận điểm danh\",{variant:\"error\"});return false;}};// Kết thúc phiên điểm danh\nconst completeSession=async()=>{try{// Hiển thị thông báo đang xử lý\nenqueueSnackbar(\"Đang kết thúc phiên điểm danh...\",{variant:\"info\"});// Gọi API kết thúc phiên\nawait axios.put(`${API_URL}/attendance/sessions/${sessionId}`,{status:\"completed\"},{headers:{Authorization:`Bearer ${token}`}});enqueueSnackbar(\"Phiên điểm danh đã kết thúc thành công\",{variant:\"success\"});// Chuyển hướng về trang lớp học\nsetTimeout(()=>{navigate(`/teacher/classes/${classId}`);},1000);}catch(error){console.error(\"Lỗi khi kết thúc phiên điểm danh:\",error);enqueueSnackbar(\"Lỗi khi kết thúc phiên điểm danh\",{variant:\"error\"});}};// Làm mới danh sách điểm danh\nconst refreshAttendanceLogs=async()=>{try{enqueueSnackbar(\"Đang làm mới dữ liệu điểm danh...\",{variant:\"info\"});// Tải song song dữ liệu logs và thông tin phiên\nconst[logsResponse,sessionResponse]=await Promise.all([axios.get(`${API_URL}/attendance/logs/${sessionId}`,{headers:{Authorization:`Bearer ${token}`}}),axios.get(`${API_URL}/attendance/sessions/${sessionId}`,{headers:{Authorization:`Bearer ${token}`}})]);// Cập nhật state\nsetAttendanceLogs(logsResponse.data.data);setSessionInfo(sessionResponse.data.data);enqueueSnackbar(\"Đã làm mới dữ liệu điểm danh\",{variant:\"success\"});}catch(error){console.error(\"Lỗi khi làm mới dữ liệu:\",error);enqueueSnackbar(\"Lỗi khi làm mới dữ liệu điểm danh\",{variant:\"error\"});}};// Tối ưu hàm lấy thông tin phiên\nconst fetchSessionInfo=async()=>{try{const sessionResponse=await axios.get(`${API_URL}/attendance/sessions/${sessionId}`,{headers:{Authorization:`Bearer ${token}`}});setSessionInfo(sessionResponse.data.data);return sessionResponse.data.data;}catch(error){console.error(\"Lỗi khi lấy thông tin phiên:\",error);return null;}};// Tối ưu hàm xử lý nhận diện khuôn mặt\nconst captureAndRecognize=async()=>{try{var _webcamRef$current5;setIsRecognizing(true);enqueueSnackbar(\"Đang nhận diện khuôn mặt...\",{variant:\"info\"});// Kiểm tra camera\nif(!ensureCameraIsWorking()){enqueueSnackbar(\"Camera không hoạt động, vui lòng khởi động lại\",{variant:\"error\"});setIsRecognizing(false);return;}// Phát hiện khuôn mặt\nconst detections=await handleDetectFaces(false);// Kiểm tra phát hiện khuôn mặt\nif(!detections||detections.length===0){enqueueSnackbar(\"Không phát hiện khuôn mặt nào trong hình\",{variant:\"warning\"});setIsRecognizing(false);return;}// Kiểm tra descriptor\nif(!detections[0].descriptor){enqueueSnackbar(\"Không thể trích xuất đặc trưng khuôn mặt để nhận diện\",{variant:\"error\"});setIsRecognizing(false);return;}// Xử lý nhận diện với dữ liệu sinh viên\nif(!classStudents||classStudents.length===0){enqueueSnackbar(\"Không có dữ liệu sinh viên để so sánh\",{variant:\"error\"});setIsRecognizing(false);return;}// Chụp ảnh từ webcam\nconst imageBase64=(_webcamRef$current5=webcamRef.current)===null||_webcamRef$current5===void 0?void 0:_webcamRef$current5.getScreenshot();// Lấy descriptor của khuôn mặt phát hiện được\nconst faceDescriptor=detections[0].descriptor;// So sánh với dữ liệu sinh viên\nconst matchResults=[];// Tạo một mảng promises để xử lý song song các tính toán\nconst comparePromises=classStudents.map(async student=>{// Trích xuất descriptors từ sinh viên\nconst studentDescriptors=extractStudentDescriptors(student);if(studentDescriptors.length===0)return null;// Tính độ tương đồng tốt nhất\nlet bestMatch=0;for(const descriptor of studentDescriptors){try{const distance=faceapi.euclideanDistance(faceDescriptor,descriptor);const similarity=Math.max(0,1-distance);bestMatch=Math.max(bestMatch,similarity);}catch(error){// Bỏ qua lỗi và tiếp tục với descriptor tiếp theo\n}}return{studentId:student._id,name:student.full_name,confidence:bestMatch,studentCode:student.student_code};});// Đợi tất cả tính toán hoàn thành và lọc kết quả null\nconst results=(await Promise.all(comparePromises)).filter(result=>result!==null);// Sắp xếp kết quả theo độ tương đồng\nresults.sort((a,b)=>b.confidence-a.confidence);matchResults.push(...results);// Lọc kết quả theo ngưỡng\nconst filteredResults=matchResults.filter(r=>r.confidence>RECOGNITION_THRESHOLD);// Cập nhật danh sách sinh viên được nhận diện\ndispatch(setRecognizedStudents(filteredResults));// Hiển thị kết quả\nif(matchResults.length>0){const topMatches=matchResults.slice(0,3);if(filteredResults.length>0){const topMatch=filteredResults[0];enqueueSnackbar(`Đã nhận diện: ${topMatch.name} (${Math.round(topMatch.confidence*100)}%)`,{variant:\"success\"});// Tự động điểm danh nếu độ tin cậy cao\nif(topMatch.confidence>CONFIDENCE_THRESHOLD){handleMarkAttendance(topMatch.studentId,topMatch.confidence);}}else{const matchDetails=topMatches.map(m=>`${m.name}: ${(m.confidence*100).toFixed(1)}%`).join(\", \");enqueueSnackbar(`Không nhận diện được sinh viên nào vượt ngưỡng. Gần nhất: ${matchDetails}`,{variant:\"warning\"});}}else{enqueueSnackbar(\"Không nhận diện được sinh viên nào\",{variant:\"warning\"});}}catch(error){console.error(\"Lỗi khi nhận diện khuôn mặt:\",error);enqueueSnackbar(`Lỗi khi nhận diện: ${error.message}`,{variant:\"error\"});}finally{setIsRecognizing(false);}};// Tối ưu hàm đánh dấu điểm danh\nconst handleMarkAttendance=async(studentId,confidence)=>{// Kiểm tra xem sinh viên đã được điểm danh chưa\nconst isAlreadyAttended=attendanceLogs.some(log=>log.student_id._id===studentId&&log.status===\"present\");if(isAlreadyAttended)return;try{var _webcamRef$current6;// Chụp ảnh từ video element\nconst videoElement=isAutoMode?videoRef.current:(_webcamRef$current6=webcamRef.current)===null||_webcamRef$current6===void 0?void 0:_webcamRef$current6.video;if(!videoElement)return;let imageBase64=null;// Tạo ảnh chụp\nif(!isAutoMode&&webcamRef.current){imageBase64=webcamRef.current.getScreenshot();}else if(isAutoMode&&videoElement){// Tạo canvas để chụp từ video\nconst canvas=document.createElement(\"canvas\");canvas.width=videoElement.videoWidth;canvas.height=videoElement.videoHeight;const ctx=canvas.getContext(\"2d\");ctx.drawImage(videoElement,0,0);imageBase64=canvas.toDataURL(\"image/jpeg\");}// Tìm sinh viên trong danh sách\nconst student=classStudents.find(s=>s._id===studentId);if(!student)return;// Trích xuất descriptor\nconst descriptors=extractStudentDescriptors(student);const descriptor=descriptors.length>0?descriptors[0]:null;// Gọi API điểm danh\nawait markAttendance(studentId,descriptor,confidence,imageBase64);}catch(error){console.error(\"Lỗi khi đánh dấu điểm danh:\",error);enqueueSnackbar(\"Lỗi khi đánh dấu điểm danh\",{variant:\"error\"});}};// Bật/tắt hiển thị landmark trên khuôn mặt\nconst toggleLandmarkDetection=()=>{const newState=!showLandmark;setShowLandmark(newState);// Bắt đầu hoặc dừng interval landmark detection\nif(newState){startLandmarkDetection();}else if(landmarkIntervalId){clearInterval(landmarkIntervalId);setLandmarkIntervalId(null);// Xóa canvas khi tắt landmarks\nconst canvasElement=canvasRef.current;if(canvasElement){const ctx=canvasElement.getContext(\"2d\");ctx.clearRect(0,0,canvasElement.width,canvasElement.height);}}};// Thêm hàm debug để kiểm tra cấu trúc dữ liệu khuôn mặt\nconst debugFaceFeatures=()=>{if(!classStudents||classStudents.length===0){console.log(\"[DEBUG] Không có sinh viên nào để kiểm tra dữ liệu khuôn mặt\");return;}classStudents.forEach((student,index)=>{console.log(`[DEBUG] Sinh viên #${index+1}: ${student.full_name}`);// Kiểm tra dữ liệu faceFeatures\nif(student.faceFeatures){console.log(`  - Có dữ liệu faceFeatures`);// Kiểm tra descriptors\nif(student.faceFeatures.descriptors){console.log(`  - Có descriptors: ${student.faceFeatures.descriptors.length} nhóm`);student.faceFeatures.descriptors.forEach((group,groupIndex)=>{if(Array.isArray(group)){console.log(`    - Nhóm #${groupIndex+1}: ${group.length} descriptors`);group.forEach((descriptor,descIndex)=>{if(Array.isArray(descriptor)){console.log(`      - Descriptor #${descIndex+1}: ${descriptor.length} phần tử`);}else{console.log(`      - Descriptor #${descIndex+1}: Không phải mảng`);}});}else{console.log(`    - Nhóm #${groupIndex+1}: Không phải mảng`);}});}else{console.log(`  - Không có dữ liệu descriptors`);}}else{console.log(`  - Không có dữ liệu faceFeatures`);}// Kiểm tra dữ liệu cũ (faceDescriptors)\nif(student.faceDescriptors){console.log(`  - Có dữ liệu faceDescriptors (cấu trúc cũ): ${student.faceDescriptors.length} descriptors`);}});};if(isLoading){return/*#__PURE__*/_jsx(Box,{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",minHeight:\"60vh\",children:/*#__PURE__*/_jsx(CircularProgress,{})});}// Lấy danh sách sinh viên vắng mặt\nconst getAbsentStudents=()=>{if(!classInfo||!classInfo.students||!attendanceLogs)return[];// Tạo Set các ID sinh viên đã điểm danh để tăng tốc độ tìm kiếm\nconst presentStudentIds=new Set(attendanceLogs.filter(log=>log.status===\"present\").map(log=>log.student_id._id));// Lọc ra sinh viên chưa điểm danh\nreturn classInfo.students.filter(student=>!presentStudentIds.has(student._id));};const absentStudents=getAbsentStudents();// Điểm danh thủ công trong chế độ đơn giản\nconst showStudentList=()=>{if(!classInfo){enqueueSnackbar(\"Không có thông tin lớp học\",{variant:\"error\"});return;}// Lấy danh sách sinh viên vắng mặt\nconst absentStudents=getAbsentStudents();if(absentStudents.length===0){enqueueSnackbar(\"Tất cả sinh viên đã được điểm danh\",{variant:\"success\"});return;}// Mở dialog điểm danh thủ công với sinh viên đầu tiên trong danh sách\nif(absentStudents.length>0&&absentStudents[0]){openManualAttendanceDialog(absentStudents[0]);}};// Tối ưu phần Webcam và Camera\nconst VideoDisplay=_ref=>{let{isCameraReady,isAutoMode,webcamRef,videoRef,canvasRef,onUserMedia,onUserMediaError}=_ref;// Component con để xử lý hiển thị video\nreturn/*#__PURE__*/_jsx(Paper,{elevation:3,sx:{position:\"relative\",width:\"100%\",height:\"400px\",display:\"flex\",justifyContent:\"center\",alignItems:\"center\",overflow:\"hidden\",mb:2},children:isCameraReady?/*#__PURE__*/_jsxs(_Fragment,{children:[isAutoMode?/*#__PURE__*/// Video element cho chế độ tự động\n_jsx(\"video\",{ref:videoRef,style:{position:\"absolute\",width:\"100%\",height:\"100%\",objectFit:\"cover\"},autoPlay:true,playsInline:true,muted:true}):/*#__PURE__*/// Webcam component cho chế độ thủ công\n_jsx(Webcam,{audio:false,ref:webcamRef,screenshotFormat:\"image/jpeg\",width:640,height:480,videoConstraints:{width:640,height:480,facingMode:\"user\"},style:{position:\"absolute\",width:\"100%\",height:\"100%\",objectFit:\"cover\"},onUserMedia:onUserMedia,onUserMediaError:onUserMediaError}),/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,style:{position:\"absolute\",top:0,left:0,width:\"100%\",height:\"100%\",objectFit:\"cover\",zIndex:10}})]}):/*#__PURE__*/_jsx(CameraLoadingPlaceholder,{})});};// Component hiển thị placeholder khi camera chưa khởi tạo\nconst CameraLoadingPlaceholder=()=>/*#__PURE__*/_jsxs(Box,{display:\"flex\",flexDirection:\"column\",alignItems:\"center\",py:4,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,align:\"center\",children:\"S\\u1EB5n s\\xE0ng \\u0111i\\u1EC3m danh\"}),/*#__PURE__*/_jsx(Box,{mt:2,textAlign:\"center\",children:/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"textSecondary\",paragraph:true,children:\"Nh\\u1EA5n n\\xFAt \\\"B\\u1EAFt \\u0111\\u1EA7u \\u0111i\\u1EC3m danh\\\" \\u0111\\u1EC3 kh\\u1EDFi \\u0111\\u1ED9ng camera v\\xE0 b\\u1EAFt \\u0111\\u1EA7u \\u0111i\\u1EC3m danh\"})}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",size:\"large\",onClick:initDirectCamera,startIcon:/*#__PURE__*/_jsx(CameraAlt,{}),sx:{mt:2,mb:3},children:\"B\\u1EAFt \\u0111\\u1EA7u \\u0111i\\u1EC3m danh\"}),/*#__PURE__*/_jsxs(Alert,{severity:\"info\",sx:{maxWidth:500},children:[/*#__PURE__*/_jsx(AlertTitle,{children:\"L\\u01B0u \\xFD khi s\\u1EED d\\u1EE5ng camera\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",component:\"div\",children:/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"\\u0110\\u1EA3m b\\u1EA3o b\\u1EA1n \\u0111\\xE3 c\\u1EA5p quy\\u1EC1n truy c\\u1EADp camera cho tr\\xECnh duy\\u1EC7t\"}),/*#__PURE__*/_jsx(\"li\",{children:\"\\u0110i\\u1EC1u ch\\u1EC9nh \\xE1nh s\\xE1ng \\u0111\\u1EA7y \\u0111\\u1EE7 \\u0111\\u1EC3 t\\u0103ng \\u0111\\u1ED9 ch\\xEDnh x\\xE1c nh\\u1EADn di\\u1EC7n\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Camera s\\u1EBD t\\u1EF1 \\u0111\\u1ED9ng nh\\u1EADn di\\u1EC7n khu\\xF4n m\\u1EB7t trong ch\\u1EBF \\u0111\\u1ED9 t\\u1EF1 \\u0111\\u1ED9ng\"}),/*#__PURE__*/_jsx(\"li\",{children:\"C\\xF3 th\\u1EC3 \\u0111i\\u1EC3m danh th\\u1EE7 c\\xF4ng n\\u1EBFu g\\u1EB7p v\\u1EA5n \\u0111\\u1EC1 v\\u1EDBi camera\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Nh\\u1EA5n \\\"Ch\\u1EE5p & Nh\\u1EADn di\\u1EC7n\\\" \\u0111\\u1EC3 \\u0111i\\u1EC3m danh th\\u1EE7 c\\xF4ng t\\u1EEBng sinh vi\\xEAn\"})]})}),/*#__PURE__*/_jsx(Box,{display:\"flex\",justifyContent:\"flex-end\",mt:1,children:/*#__PURE__*/_jsx(Button,{variant:\"outlined\",color:\"warning\",size:\"small\",onClick:showStudentList,startIcon:/*#__PURE__*/_jsx(Edit,{}),children:\"\\u0110i\\u1EC3m danh th\\u1EE7 c\\xF4ng\"})})]})]});// Component hiển thị danh sách sinh viên đã nhận diện\nconst RecognizedStudentsList=_ref2=>{let{students,onMarkAttendance}=_ref2;if(students.length===0)return null;return/*#__PURE__*/_jsxs(Box,{mt:2,children:[/*#__PURE__*/_jsxs(Typography,{variant:\"subtitle1\",gutterBottom:true,children:[\"\\u0110\\xE3 nh\\u1EADn di\\u1EC7n (\",students.length,\")\"]}),/*#__PURE__*/_jsx(Grid,{container:true,spacing:1,children:students.map((student,index)=>/*#__PURE__*/_jsx(Grid,{item:true,xs:6,sm:4,children:/*#__PURE__*/_jsxs(Paper,{elevation:2,sx:{p:1,display:\"flex\",flexDirection:\"column\",alignItems:\"center\"},children:[/*#__PURE__*/_jsx(Typography,{variant:\"body2\",noWrap:true,children:student.name}),/*#__PURE__*/_jsxs(Typography,{variant:\"caption\",color:\"textSecondary\",children:[Math.round(student.confidence*100),\"% match\"]}),/*#__PURE__*/_jsxs(Button,{size:\"small\",variant:\"outlined\",color:\"primary\",sx:{mt:1},onClick:()=>onMarkAttendance(student.studentId,student.confidence),children:[/*#__PURE__*/_jsx(Check,{fontSize:\"small\",sx:{mr:0.5}}),\"\\u0110i\\u1EC3m danh\"]})]})},index))})]});};// Component hiển thị danh sách sinh viên đã điểm danh\nconst PresentStudentsList=_ref3=>{let{attendanceLogs,refreshAttendanceLogs}=_ref3;return/*#__PURE__*/_jsx(Card,{sx:{mb:3},children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsxs(Box,{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\",mb:2,children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[\"C\\xF3 m\\u1EB7t (\",attendanceLogs.filter(log=>log.status===\"present\").length,\")\"]}),/*#__PURE__*/_jsx(IconButton,{size:\"small\",onClick:refreshAttendanceLogs,title:\"L\\xE0m m\\u1EDBi\",children:/*#__PURE__*/_jsx(Refresh,{})})]}),/*#__PURE__*/_jsxs(List,{dense:true,sx:{maxHeight:\"300px\",overflow:\"auto\"},children:[attendanceLogs.filter(log=>log.status===\"present\").sort((a,b)=>new Date(b.timestamp)-new Date(a.timestamp)).map(log=>/*#__PURE__*/_jsxs(ListItem,{secondaryAction:/*#__PURE__*/_jsx(Chip,{size:\"small\",icon:log.recognized?/*#__PURE__*/_jsx(VerifiedUser,{fontSize:\"small\"}):null,label:log.recognized?\"Tự động\":\"Thủ công\",color:log.recognized?\"success\":\"primary\"}),children:[/*#__PURE__*/_jsx(ListItemAvatar,{children:/*#__PURE__*/_jsx(Avatar,{alt:log.student_id.full_name,src:log.student_id.avatar_url})}),/*#__PURE__*/_jsx(ListItemText,{primary:log.student_id.full_name,secondary:`${new Date(log.timestamp).toLocaleTimeString(\"vi-VN\")}`})]},log._id)),attendanceLogs.filter(log=>log.status===\"present\").length===0&&/*#__PURE__*/_jsx(ListItem,{children:/*#__PURE__*/_jsx(ListItemText,{primary:\"Ch\\u01B0a c\\xF3 sinh vi\\xEAn n\\xE0o \\u0111i\\u1EC3m danh\"})})]})]})});};// Component hiển thị danh sách sinh viên vắng mặt\nconst AbsentStudentsList=_ref4=>{let{absentStudents,onOpenManualAttendance}=_ref4;return/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",gutterBottom:true,children:[\"V\\u1EAFng m\\u1EB7t (\",absentStudents.length,\")\"]}),/*#__PURE__*/_jsxs(List,{dense:true,sx:{maxHeight:\"300px\",overflow:\"auto\"},children:[absentStudents.map(student=>/*#__PURE__*/_jsxs(ListItem,{secondaryAction:/*#__PURE__*/_jsx(IconButton,{edge:\"end\",onClick:()=>onOpenManualAttendance(student),title:\"\\u0110i\\u1EC3m danh th\\u1EE7 c\\xF4ng\",children:/*#__PURE__*/_jsx(Edit,{fontSize:\"small\"})}),children:[/*#__PURE__*/_jsx(ListItemAvatar,{children:/*#__PURE__*/_jsx(Avatar,{alt:student.full_name,src:student.avatar_url})}),/*#__PURE__*/_jsx(ListItemText,{primary:student.full_name,secondary:student.student_code})]},student._id)),absentStudents.length===0&&/*#__PURE__*/_jsx(ListItem,{children:/*#__PURE__*/_jsx(ListItemText,{primary:\"Kh\\xF4ng c\\xF3 sinh vi\\xEAn n\\xE0o v\\u1EAFng m\\u1EB7t\"})})]})]})});};// Component dialog điểm danh thủ công\nconst ManualAttendanceDialog=_ref5=>{let{open,onClose,student,attendanceData,onAttendanceChange,onSubmit}=_ref5;return/*#__PURE__*/_jsxs(Dialog,{open:open,onClose:onClose,maxWidth:\"sm\",fullWidth:true,children:[/*#__PURE__*/_jsx(DialogTitle,{children:\"\\u0110i\\u1EC3m danh th\\u1EE7 c\\xF4ng\"}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsxs(Box,{sx:{p:1},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"subtitle1\",gutterBottom:true,children:[student===null||student===void 0?void 0:student.full_name,\" (\",student===null||student===void 0?void 0:student.student_code,\")\"]}),/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,margin:\"normal\",children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Tr\\u1EA1ng th\\xE1i\"}),/*#__PURE__*/_jsxs(Select,{name:\"status\",value:attendanceData.status,onChange:onAttendanceChange,label:\"Tr\\u1EA1ng th\\xE1i\",children:[/*#__PURE__*/_jsx(MenuItem,{value:\"present\",children:\"C\\xF3 m\\u1EB7t\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"absent\",children:\"V\\u1EAFng m\\u1EB7t\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"late\",children:\"\\u0110i tr\\u1EC5\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"early_leave\",children:\"V\\u1EC1 s\\u1EDBm\"})]})]}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,margin:\"normal\",name:\"note\",label:\"Ghi ch\\xFA\",value:attendanceData.note,onChange:onAttendanceChange,multiline:true,rows:2})]})}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:onClose,children:\"H\\u1EE7y\"}),/*#__PURE__*/_jsx(Button,{onClick:onSubmit,variant:\"contained\",color:\"primary\",children:\"X\\xE1c nh\\u1EADn\"})]})]});};return/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsxs(Box,{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\",mb:2,children:[/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h5\",children:[\"\\u0110i\\u1EC3m Danh - \",classInfo===null||classInfo===void 0?void 0:classInfo.class_name]}),/*#__PURE__*/_jsxs(Typography,{variant:\"subtitle1\",color:\"textSecondary\",children:[\"Bu\\u1ED5i \",sessionInfo===null||sessionInfo===void 0?void 0:sessionInfo.session_number,\" -\",\" \",new Date(sessionInfo===null||sessionInfo===void 0?void 0:sessionInfo.date).toLocaleDateString(\"vi-VN\")]})]}),/*#__PURE__*/_jsx(Button,{variant:\"outlined\",startIcon:/*#__PURE__*/_jsx(ArrowBack,{}),onClick:()=>navigate(`/teacher/classes/${classId}`),children:\"Quay l\\u1EA1i\"})]}),/*#__PURE__*/_jsxs(Grid,{container:true,spacing:3,mt:1,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:8,children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(CardContent,{children:/*#__PURE__*/_jsxs(Box,{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\",mb:2,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Camera nh\\u1EADn di\\u1EC7n\"}),isCameraReady&&/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Chip,{label:isAutoMode?\"Tự động đang bật\":\"Tự động đang tắt\",color:isAutoMode?\"success\":\"default\",sx:{mr:1}}),/*#__PURE__*/_jsx(Button,{variant:\"outlined\",color:isAutoMode?\"error\":\"primary\",onClick:()=>{if(isAutoMode){// Dừng tự động\nif(intervalId){clearInterval(intervalId);setIntervalId(null);}setIsAutoMode(false);enqueueSnackbar(\"Đã tắt chế độ tự động điểm danh\",{variant:\"info\"});}else{// Bắt đầu tự động\nif(intervalId){clearInterval(intervalId);}setLastDetectionTime(Date.now());const id=setInterval(()=>{handleDetectFaces();},AUTO_DETECT_INTERVAL);setIntervalId(id);setIsAutoMode(true);enqueueSnackbar(\"Đã bật chế độ tự động điểm danh\",{variant:\"info\"});}},children:isAutoMode?\"Tắt tự động\":\"Bật tự động\"})]})]})}),isCameraReady?/*#__PURE__*/_jsx(VideoDisplay,{isCameraReady:isCameraReady,isAutoMode:isAutoMode,webcamRef:webcamRef,videoRef:videoRef,canvasRef:canvasRef,onUserMedia:stream=>{console.log(\"Camera đã được cấp quyền và khởi tạo\",stream.id);setTimeout(()=>{if(webcamRef.current&&webcamRef.current.video){dispatch(setCameraReady(true));setLastDetectionTime(Date.now());}},500);},onUserMediaError:err=>{console.error(\"Lỗi khi truy cập camera:\",err);enqueueSnackbar(`Không thể truy cập camera: ${err.name===\"NotAllowedError\"?\"Bạn chưa cấp quyền truy cập camera\":err.name===\"NotFoundError\"?\"Không tìm thấy thiết bị camera\":err.message||\"Lỗi không xác định\"}`,{variant:\"error\"});}}):/*#__PURE__*/_jsx(CameraLoadingPlaceholder,{}),isCameraReady&&/*#__PURE__*/_jsxs(Box,{display:\"flex\",justifyContent:\"space-between\",px:2,pb:2,children:[/*#__PURE__*/_jsx(Button,{variant:\"outlined\",onClick:captureAndRecognize,startIcon:/*#__PURE__*/_jsx(CameraAlt,{}),disabled:!isCameraReady||isRecognizing||isAutoMode,children:isRecognizing?/*#__PURE__*/_jsx(CircularProgress,{size:24,color:\"inherit\"}):\"Chụp & Nhận diện\"}),/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Button,{variant:\"outlined\",color:showLandmark?\"success\":\"info\",onClick:toggleLandmarkDetection,sx:{mr:1},children:showLandmark?\"Tắt Landmark\":\"Hiện Landmark\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:completeSession,startIcon:/*#__PURE__*/_jsx(Save,{}),disabled:(sessionInfo===null||sessionInfo===void 0?void 0:sessionInfo.status)===\"completed\",children:\"K\\u1EBFt th\\xFAc phi\\xEAn\"})]})]}),/*#__PURE__*/_jsx(Box,{px:2,pb:2,children:/*#__PURE__*/_jsx(RecognizedStudentsList,{students:recognizedStudents,onMarkAttendance:handleMarkAttendance})})]})}),/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,md:4,children:[/*#__PURE__*/_jsx(PresentStudentsList,{attendanceLogs:attendanceLogs.filter(log=>log.status===\"present\"),refreshAttendanceLogs:refreshAttendanceLogs}),/*#__PURE__*/_jsx(AbsentStudentsList,{absentStudents:absentStudents,onOpenManualAttendance:openManualAttendanceDialog})]})]}),/*#__PURE__*/_jsx(ManualAttendanceDialog,{open:manualDialogOpen,onClose:handleManualDialogClose,student:selectedStudent,attendanceData:manualAttendanceData,onAttendanceChange:handleManualAttendanceChange,onSubmit:handleManualAttendanceSubmit})]});};export default AttendancePage;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}