{"ast":null,"code":"import * as faceapi from \"face-api.js\";\nlet isModelsLoaded = false;\n\n/**\r\n * Tải các model face-api.js\r\n * @returns {Promise<boolean>}\r\n */\nexport const loadModels = async () => {\n  if (isModelsLoaded) {\n    return true;\n  }\n  try {\n    const MODEL_URL = \"/models\";\n    await Promise.all([faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL), faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL), faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL)]);\n    isModelsLoaded = true;\n    return true;\n  } catch (error) {\n    console.error(\"Error loading models:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Kiểm tra tính hợp lệ của một bounding box\r\n * @param {Object} box - Box object từ face-api.js\r\n * @returns {boolean} - Hợp lệ hay không\r\n */\nconst isValidBox = box => {\n  if (!box) return false;\n  const {\n    x,\n    y,\n    width,\n    height\n  } = box;\n  return x !== null && y !== null && width !== null && height !== null && !isNaN(x) && !isNaN(y) && !isNaN(width) && !isNaN(height) && width > 0 && height > 0;\n};\n\n/**\r\n * Phát hiện khuôn mặt từ hình ảnh\r\n * @param {string} imageData - Base64 image data\r\n * @returns {Promise<Object>} - Kết quả phát hiện khuôn mặt\r\n */\nexport const detectFace = async imageData => {\n  if (!isModelsLoaded) {\n    await loadModels();\n  }\n  try {\n    const img = await createImage(imageData);\n    const detectionOptions = new faceapi.TinyFaceDetectorOptions({\n      minConfidence: 0.5\n    });\n    const detections = await faceapi.detectSingleFace(img, detectionOptions).withFaceLandmarks().withFaceDescriptor();\n\n    // Kiểm tra kết quả phát hiện\n    if (!detections || !detections.detection) {\n      console.warn(\"Không phát hiện được khuôn mặt\");\n      return null;\n    }\n\n    // Kiểm tra tính hợp lệ của box\n    if (!isValidBox(detections.detection.box)) {\n      console.warn(\"Phát hiện khuôn mặt với box không hợp lệ:\", detections.detection.box);\n      return null;\n    }\n    return detections;\n  } catch (error) {\n    console.error(\"Error detecting face:\", error);\n    return null; // Trả về null thay vì throw exception\n  }\n};\n\n/**\r\n * Tạo đối tượng Image từ base64 data\r\n * @param {string} imageData - Base64 image data\r\n * @returns {Promise<HTMLImageElement>} - Đối tượng Image\r\n */\nconst createImage = async imageData => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = err => reject(err);\n    img.src = imageData;\n  });\n};\n\n/**\r\n * Tính toán khoảng cách Euclid giữa các đặc trưng khuôn mặt\r\n * @param {Float32Array} descriptor1 - Đặc trưng khuôn mặt 1\r\n * @param {Float32Array} descriptor2 - Đặc trưng khuôn mặt 2\r\n * @returns {number} - Khoảng cách (0-1, càng nhỏ càng giống nhau)\r\n */\nexport const getFaceDistance = (descriptor1, descriptor2) => {\n  if (!descriptor1 || !descriptor2) return 1.0; // Khoảng cách lớn nhất nếu không có dữ liệu\n\n  try {\n    return faceapi.euclideanDistance(descriptor1, descriptor2);\n  } catch (error) {\n    console.error(\"Lỗi khi tính khoảng cách:\", error);\n    return 1.0;\n  }\n};\n\n/**\r\n * Kiểm tra xem khuôn mặt có phải là cùng một người không\r\n * @param {Float32Array} descriptor1 - Đặc trưng khuôn mặt 1\r\n * @param {Float32Array} descriptor2 - Đặc trưng khuôn mặt 2\r\n * @param {number} threshold - Ngưỡng để xác định là cùng một người (mặc định: 0.6)\r\n * @returns {boolean} - Có phải cùng một người không\r\n */\nexport const isSameFace = (descriptor1, descriptor2, threshold = 0.6) => {\n  if (!descriptor1 || !descriptor2) return false;\n  try {\n    const distance = getFaceDistance(descriptor1, descriptor2);\n    return distance < threshold;\n  } catch (error) {\n    console.error(\"Lỗi khi so sánh khuôn mặt:\", error);\n    return false;\n  }\n};","map":{"version":3,"names":["faceapi","isModelsLoaded","loadModels","MODEL_URL","Promise","all","nets","tinyFaceDetector","loadFromUri","faceLandmark68Net","faceRecognitionNet","error","console","isValidBox","box","x","y","width","height","isNaN","detectFace","imageData","img","createImage","detectionOptions","TinyFaceDetectorOptions","minConfidence","detections","detectSingleFace","withFaceLandmarks","withFaceDescriptor","detection","warn","resolve","reject","Image","onload","onerror","err","src","getFaceDistance","descriptor1","descriptor2","euclideanDistance","isSameFace","threshold","distance"],"sources":["C:/Users/kasiz/Documents/Studying/FaceReg/frontend/src/utils/faceUtils.js"],"sourcesContent":["import * as faceapi from \"face-api.js\";\r\n\r\nlet isModelsLoaded = false;\r\n\r\n/**\r\n * Tải các model face-api.js\r\n * @returns {Promise<boolean>}\r\n */\r\nexport const loadModels = async () => {\r\n  if (isModelsLoaded) {\r\n    return true;\r\n  }\r\n\r\n  try {\r\n    const MODEL_URL = \"/models\";\r\n    await Promise.all([\r\n      faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\r\n      faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\r\n      faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\r\n    ]);\r\n    isModelsLoaded = true;\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error loading models:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Kiểm tra tính hợp lệ của một bounding box\r\n * @param {Object} box - Box object từ face-api.js\r\n * @returns {boolean} - Hợp lệ hay không\r\n */\r\nconst isValidBox = (box) => {\r\n  if (!box) return false;\r\n\r\n  const { x, y, width, height } = box;\r\n  return (\r\n    x !== null &&\r\n    y !== null &&\r\n    width !== null &&\r\n    height !== null &&\r\n    !isNaN(x) &&\r\n    !isNaN(y) &&\r\n    !isNaN(width) &&\r\n    !isNaN(height) &&\r\n    width > 0 &&\r\n    height > 0\r\n  );\r\n};\r\n\r\n/**\r\n * Phát hiện khuôn mặt từ hình ảnh\r\n * @param {string} imageData - Base64 image data\r\n * @returns {Promise<Object>} - Kết quả phát hiện khuôn mặt\r\n */\r\nexport const detectFace = async (imageData) => {\r\n  if (!isModelsLoaded) {\r\n    await loadModels();\r\n  }\r\n\r\n  try {\r\n    const img = await createImage(imageData);\r\n\r\n    const detectionOptions = new faceapi.TinyFaceDetectorOptions({\r\n      minConfidence: 0.5,\r\n    });\r\n\r\n    const detections = await faceapi\r\n      .detectSingleFace(img, detectionOptions)\r\n      .withFaceLandmarks()\r\n      .withFaceDescriptor();\r\n\r\n    // Kiểm tra kết quả phát hiện\r\n    if (!detections || !detections.detection) {\r\n      console.warn(\"Không phát hiện được khuôn mặt\");\r\n      return null;\r\n    }\r\n\r\n    // Kiểm tra tính hợp lệ của box\r\n    if (!isValidBox(detections.detection.box)) {\r\n      console.warn(\r\n        \"Phát hiện khuôn mặt với box không hợp lệ:\",\r\n        detections.detection.box\r\n      );\r\n      return null;\r\n    }\r\n\r\n    return detections;\r\n  } catch (error) {\r\n    console.error(\"Error detecting face:\", error);\r\n    return null; // Trả về null thay vì throw exception\r\n  }\r\n};\r\n\r\n/**\r\n * Tạo đối tượng Image từ base64 data\r\n * @param {string} imageData - Base64 image data\r\n * @returns {Promise<HTMLImageElement>} - Đối tượng Image\r\n */\r\nconst createImage = async (imageData) => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    img.onload = () => resolve(img);\r\n    img.onerror = (err) => reject(err);\r\n    img.src = imageData;\r\n  });\r\n};\r\n\r\n/**\r\n * Tính toán khoảng cách Euclid giữa các đặc trưng khuôn mặt\r\n * @param {Float32Array} descriptor1 - Đặc trưng khuôn mặt 1\r\n * @param {Float32Array} descriptor2 - Đặc trưng khuôn mặt 2\r\n * @returns {number} - Khoảng cách (0-1, càng nhỏ càng giống nhau)\r\n */\r\nexport const getFaceDistance = (descriptor1, descriptor2) => {\r\n  if (!descriptor1 || !descriptor2) return 1.0; // Khoảng cách lớn nhất nếu không có dữ liệu\r\n\r\n  try {\r\n    return faceapi.euclideanDistance(descriptor1, descriptor2);\r\n  } catch (error) {\r\n    console.error(\"Lỗi khi tính khoảng cách:\", error);\r\n    return 1.0;\r\n  }\r\n};\r\n\r\n/**\r\n * Kiểm tra xem khuôn mặt có phải là cùng một người không\r\n * @param {Float32Array} descriptor1 - Đặc trưng khuôn mặt 1\r\n * @param {Float32Array} descriptor2 - Đặc trưng khuôn mặt 2\r\n * @param {number} threshold - Ngưỡng để xác định là cùng một người (mặc định: 0.6)\r\n * @returns {boolean} - Có phải cùng một người không\r\n */\r\nexport const isSameFace = (descriptor1, descriptor2, threshold = 0.6) => {\r\n  if (!descriptor1 || !descriptor2) return false;\r\n\r\n  try {\r\n    const distance = getFaceDistance(descriptor1, descriptor2);\r\n    return distance < threshold;\r\n  } catch (error) {\r\n    console.error(\"Lỗi khi so sánh khuôn mặt:\", error);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}