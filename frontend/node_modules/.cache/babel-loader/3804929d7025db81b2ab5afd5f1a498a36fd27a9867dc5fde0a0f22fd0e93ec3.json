{"ast":null,"code":"import axios from \"../utils/axios\";\nimport { API_URL } from \"../config/config\";\n\n/**\r\n * Service để quản lý các chức năng liên quan đến sinh viên\r\n */\nclass StudentService {\n  constructor() {\n    this.cache = {\n      classes: new Map(),\n      attendanceStats: new Map(),\n      attendanceDetails: new Map()\n    };\n    this.cacheExpiration = 5 * 60 * 1000; // 5 phút tính bằng ms\n  }\n\n  /**\r\n   * Tạo khóa cache duy nhất từ các tham số\r\n   * @param {Array} params - Các tham số để tạo khóa\r\n   * @returns {string} - Khóa cache duy nhất\r\n   */\n  _createCacheKey(params) {\n    return params.filter(p => p !== undefined).join(\"_\");\n  }\n\n  /**\r\n   * Kiểm tra xem cache có còn hợp lệ không\r\n   * @param {Object} cacheEntry - Mục cache cần kiểm tra\r\n   * @returns {boolean} - true nếu cache vẫn còn hợp lệ\r\n   */\n  _isCacheValid(cacheEntry) {\n    if (!cacheEntry) return false;\n    return Date.now() - cacheEntry.timestamp < this.cacheExpiration;\n  }\n\n  /**\r\n   * Lấy danh sách lớp học của sinh viên\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} token - JWT token\r\n   * @param {Object} options - Các tùy chọn tìm kiếm và phân trang\r\n   * @returns {Promise} - Kết quả lớp học\r\n   */\n  async getStudentClasses(studentId, token, options = {}) {\n    try {\n      const {\n        page = 1,\n        limit = 10,\n        search = \"\",\n        semester = \"\",\n        academicYear = \"\",\n        skipCache = false\n      } = options;\n\n      // Tạo khóa cache\n      const cacheKey = this._createCacheKey([\"classes\", studentId, page, limit, search, semester, academicYear]);\n\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\n      if (!skipCache) {\n        const cachedData = this.cache.classes.get(cacheKey);\n        if (this._isCacheValid(cachedData)) {\n          return cachedData.data;\n        }\n      }\n\n      // Xây dựng URL với URLSearchParams để tránh lỗi encoding\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n      });\n      if (search) params.append(\"search\", search);\n      if (semester) params.append(\"semester\", semester);\n      if (academicYear) params.append(\"academic_year\", academicYear);\n      const url = `${API_URL}/classes/teaching/student/${studentId}?${params.toString()}`;\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const result = {\n        success: true,\n        data: response.data.data || [],\n        total: response.data.count || 0\n      };\n\n      // Lưu vào cache\n      this.cache.classes.set(cacheKey, {\n        data: result,\n        timestamp: Date.now()\n      });\n      return result;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Lỗi khi lấy danh sách lớp học:\", error);\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Lỗi khi lấy danh sách lớp học\",\n        data: [],\n        total: 0\n      };\n    }\n  }\n\n  /**\r\n   * Lấy thống kê điểm danh của sinh viên trong một lớp học\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} classId - ID của lớp học\r\n   * @param {string} token - JWT token\r\n   * @param {boolean} skipCache - Có bỏ qua cache hay không\r\n   * @returns {Promise} - Kết quả thống kê điểm danh\r\n   */\n  async getAttendanceStats(studentId, classId, token, skipCache = false) {\n    try {\n      // Tạo khóa cache\n      const cacheKey = this._createCacheKey([\"stats\", studentId, classId]);\n\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\n      if (!skipCache) {\n        const cachedData = this.cache.attendanceStats.get(cacheKey);\n        if (this._isCacheValid(cachedData)) {\n          return cachedData.data;\n        }\n      }\n      const response = await axios.get(`${API_URL}/attendance/student/${studentId}/logs?teaching_class=${classId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Tính toán thống kê\n      const logs = response.data.data || [];\n      const totalSessions = logs.length;\n\n      // Sử dụng reduce để tính toán trong một lần duyệt mảng\n      const counts = logs.reduce((acc, log) => {\n        if (log.status === \"present\") acc.present++;else if (log.status === \"late\") acc.late++;else if (log.status === \"absent\") acc.absent++;\n        return acc;\n      }, {\n        present: 0,\n        late: 0,\n        absent: 0\n      });\n      const {\n        present,\n        absent,\n        late\n      } = counts;\n\n      // Tính toán các tỷ lệ phần trăm\n      const presentPercentage = totalSessions > 0 ? present / totalSessions * 100 : 0;\n      const latePercentage = totalSessions > 0 ? late / totalSessions * 100 : 0;\n      const absentPercentage = totalSessions > 0 ? absent / totalSessions * 100 : 0;\n      const attendanceRate = totalSessions > 0 ? (present + late) / totalSessions * 100 : 0;\n      const result = {\n        success: true,\n        data: {\n          logs,\n          stats: {\n            total: totalSessions,\n            present,\n            absent,\n            late,\n            presentPercentage,\n            latePercentage,\n            absentPercentage,\n            attendanceRate\n          }\n        }\n      };\n\n      // Lưu vào cache\n      this.cache.attendanceStats.set(cacheKey, {\n        data: result,\n        timestamp: Date.now()\n      });\n      return result;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error(`Lỗi khi lấy thống kê điểm danh cho lớp ${classId}:`, error);\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Lỗi khi lấy thống kê điểm danh\",\n        data: {\n          logs: [],\n          stats: {\n            total: 0,\n            present: 0,\n            absent: 0,\n            late: 0,\n            presentPercentage: 0,\n            latePercentage: 0,\n            absentPercentage: 0,\n            attendanceRate: 0\n          }\n        }\n      };\n    }\n  }\n\n  /**\r\n   * Lấy chi tiết điểm danh của sinh viên trong một lớp học\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} classId - ID của lớp học\r\n   * @param {string} token - JWT token\r\n   * @param {Object} options - Các tùy chọn tìm kiếm và phân trang\r\n   * @returns {Promise} - Kết quả chi tiết điểm danh\r\n   */\n  async getAttendanceDetails(studentId, classId, token, options = {}) {\n    try {\n      const {\n        page = 1,\n        limit = 10,\n        sortBy = \"date\",\n        sortOrder = \"desc\",\n        skipCache = false\n      } = options;\n\n      // Tạo khóa cache\n      const cacheKey = this._createCacheKey([\"details\", studentId, classId, page, limit, sortBy, sortOrder]);\n\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\n      if (!skipCache) {\n        const cachedData = this.cache.attendanceDetails.get(cacheKey);\n        if (this._isCacheValid(cachedData)) {\n          return cachedData.data;\n        }\n      }\n\n      // Sử dụng URLSearchParams để xây dựng URL\n      const params = new URLSearchParams({\n        teaching_class: classId,\n        page: page.toString(),\n        limit: limit.toString(),\n        sort: sortBy,\n        order: sortOrder\n      });\n      const url = `${API_URL}/attendance/student/${studentId}/logs?${params.toString()}`;\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const result = {\n        success: true,\n        data: response.data.data || [],\n        total: response.data.count || 0\n      };\n\n      // Lưu vào cache\n      this.cache.attendanceDetails.set(cacheKey, {\n        data: result,\n        timestamp: Date.now()\n      });\n      return result;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error(`Lỗi khi lấy chi tiết điểm danh cho lớp ${classId}:`, error);\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || \"Lỗi khi lấy chi tiết điểm danh\",\n        data: [],\n        total: 0\n      };\n    }\n  }\n\n  /**\r\n   * Xóa cache cho một sinh viên cụ thể\r\n   * @param {string} studentId - ID của sinh viên\r\n   */\n  clearCache(studentId) {\n    // Xóa tất cả cache liên quan đến sinh viên này\n    for (const [key, cache] of Object.entries(this.cache)) {\n      for (const cacheKey of cache.keys()) {\n        if (cacheKey.includes(studentId)) {\n          cache.delete(cacheKey);\n        }\n      }\n    }\n  }\n\n  /**\r\n   * Tính điểm chuyên cần dựa trên số buổi vắng\r\n   * @param {number} absences - Số buổi vắng\r\n   * @returns {number} - Điểm chuyên cần (thang điểm 10)\r\n   */\n  calculateAttendanceScore(absences) {\n    // Trừ 2 điểm cho mỗi buổi vắng, tối đa 10 điểm\n    const score = Math.max(0, 10 - absences * 2);\n    return parseFloat(score.toFixed(1)); // Làm tròn đến 1 chữ số thập phân hiệu quả hơn\n  }\n\n  /**\r\n   * Xác định trạng thái điểm danh dựa trên tỷ lệ tham gia\r\n   * @param {Object} stats - Thống kê điểm danh\r\n   * @returns {Object} - Trạng thái tham gia và thông báo\r\n   */\n  getAttendanceStatus(stats) {\n    const rate = stats.attendanceRate || 0;\n    if (rate >= 80) {\n      return {\n        status: \"success\",\n        message: \"Tốt\"\n      };\n    } else if (rate >= 60) {\n      return {\n        status: \"warning\",\n        message: \"Cần cải thiện\"\n      };\n    } else {\n      return {\n        status: \"error\",\n        message: \"Nguy hiểm\"\n      };\n    }\n  }\n}\nexport default new StudentService();","map":{"version":3,"names":["axios","API_URL","StudentService","constructor","cache","classes","Map","attendanceStats","attendanceDetails","cacheExpiration","_createCacheKey","params","filter","p","undefined","join","_isCacheValid","cacheEntry","Date","now","timestamp","getStudentClasses","studentId","token","options","page","limit","search","semester","academicYear","skipCache","cacheKey","cachedData","get","data","URLSearchParams","toString","append","url","response","headers","Authorization","result","success","total","count","set","error","_error$response","_error$response$data","console","message","getAttendanceStats","classId","logs","totalSessions","length","counts","reduce","acc","log","status","present","late","absent","presentPercentage","latePercentage","absentPercentage","attendanceRate","stats","_error$response2","_error$response2$data","getAttendanceDetails","sortBy","sortOrder","teaching_class","sort","order","_error$response3","_error$response3$data","clearCache","key","Object","entries","keys","includes","delete","calculateAttendanceScore","absences","score","Math","max","parseFloat","toFixed","getAttendanceStatus","rate"],"sources":["C:/Users/kasiz/Documents/Studying/FaceReg/frontend/src/services/studentService.js"],"sourcesContent":["import axios from \"../utils/axios\";\r\nimport { API_URL } from \"../config/config\";\r\n\r\n/**\r\n * Service để quản lý các chức năng liên quan đến sinh viên\r\n */\r\nclass StudentService {\r\n  constructor() {\r\n    this.cache = {\r\n      classes: new Map(),\r\n      attendanceStats: new Map(),\r\n      attendanceDetails: new Map(),\r\n    };\r\n    this.cacheExpiration = 5 * 60 * 1000; // 5 phút tính bằng ms\r\n  }\r\n\r\n  /**\r\n   * Tạo khóa cache duy nhất từ các tham số\r\n   * @param {Array} params - Các tham số để tạo khóa\r\n   * @returns {string} - Khóa cache duy nhất\r\n   */\r\n  _createCacheKey(params) {\r\n    return params.filter((p) => p !== undefined).join(\"_\");\r\n  }\r\n\r\n  /**\r\n   * Kiểm tra xem cache có còn hợp lệ không\r\n   * @param {Object} cacheEntry - Mục cache cần kiểm tra\r\n   * @returns {boolean} - true nếu cache vẫn còn hợp lệ\r\n   */\r\n  _isCacheValid(cacheEntry) {\r\n    if (!cacheEntry) return false;\r\n    return Date.now() - cacheEntry.timestamp < this.cacheExpiration;\r\n  }\r\n\r\n  /**\r\n   * Lấy danh sách lớp học của sinh viên\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} token - JWT token\r\n   * @param {Object} options - Các tùy chọn tìm kiếm và phân trang\r\n   * @returns {Promise} - Kết quả lớp học\r\n   */\r\n  async getStudentClasses(studentId, token, options = {}) {\r\n    try {\r\n      const {\r\n        page = 1,\r\n        limit = 10,\r\n        search = \"\",\r\n        semester = \"\",\r\n        academicYear = \"\",\r\n        skipCache = false,\r\n      } = options;\r\n\r\n      // Tạo khóa cache\r\n      const cacheKey = this._createCacheKey([\r\n        \"classes\",\r\n        studentId,\r\n        page,\r\n        limit,\r\n        search,\r\n        semester,\r\n        academicYear,\r\n      ]);\r\n\r\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\r\n      if (!skipCache) {\r\n        const cachedData = this.cache.classes.get(cacheKey);\r\n        if (this._isCacheValid(cachedData)) {\r\n          return cachedData.data;\r\n        }\r\n      }\r\n\r\n      // Xây dựng URL với URLSearchParams để tránh lỗi encoding\r\n      const params = new URLSearchParams({\r\n        page: page.toString(),\r\n        limit: limit.toString(),\r\n      });\r\n\r\n      if (search) params.append(\"search\", search);\r\n      if (semester) params.append(\"semester\", semester);\r\n      if (academicYear) params.append(\"academic_year\", academicYear);\r\n\r\n      const url = `${API_URL}/classes/teaching/student/${studentId}?${params.toString()}`;\r\n\r\n      const response = await axios.get(url, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      const result = {\r\n        success: true,\r\n        data: response.data.data || [],\r\n        total: response.data.count || 0,\r\n      };\r\n\r\n      // Lưu vào cache\r\n      this.cache.classes.set(cacheKey, {\r\n        data: result,\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error(\"Lỗi khi lấy danh sách lớp học:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || \"Lỗi khi lấy danh sách lớp học\",\r\n        data: [],\r\n        total: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lấy thống kê điểm danh của sinh viên trong một lớp học\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} classId - ID của lớp học\r\n   * @param {string} token - JWT token\r\n   * @param {boolean} skipCache - Có bỏ qua cache hay không\r\n   * @returns {Promise} - Kết quả thống kê điểm danh\r\n   */\r\n  async getAttendanceStats(studentId, classId, token, skipCache = false) {\r\n    try {\r\n      // Tạo khóa cache\r\n      const cacheKey = this._createCacheKey([\"stats\", studentId, classId]);\r\n\r\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\r\n      if (!skipCache) {\r\n        const cachedData = this.cache.attendanceStats.get(cacheKey);\r\n        if (this._isCacheValid(cachedData)) {\r\n          return cachedData.data;\r\n        }\r\n      }\r\n\r\n      const response = await axios.get(\r\n        `${API_URL}/attendance/student/${studentId}/logs?teaching_class=${classId}`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n\r\n      // Tính toán thống kê\r\n      const logs = response.data.data || [];\r\n      const totalSessions = logs.length;\r\n\r\n      // Sử dụng reduce để tính toán trong một lần duyệt mảng\r\n      const counts = logs.reduce(\r\n        (acc, log) => {\r\n          if (log.status === \"present\") acc.present++;\r\n          else if (log.status === \"late\") acc.late++;\r\n          else if (log.status === \"absent\") acc.absent++;\r\n          return acc;\r\n        },\r\n        { present: 0, late: 0, absent: 0 }\r\n      );\r\n\r\n      const { present, absent, late } = counts;\r\n\r\n      // Tính toán các tỷ lệ phần trăm\r\n      const presentPercentage =\r\n        totalSessions > 0 ? (present / totalSessions) * 100 : 0;\r\n      const latePercentage =\r\n        totalSessions > 0 ? (late / totalSessions) * 100 : 0;\r\n      const absentPercentage =\r\n        totalSessions > 0 ? (absent / totalSessions) * 100 : 0;\r\n      const attendanceRate =\r\n        totalSessions > 0 ? ((present + late) / totalSessions) * 100 : 0;\r\n\r\n      const result = {\r\n        success: true,\r\n        data: {\r\n          logs,\r\n          stats: {\r\n            total: totalSessions,\r\n            present,\r\n            absent,\r\n            late,\r\n            presentPercentage,\r\n            latePercentage,\r\n            absentPercentage,\r\n            attendanceRate,\r\n          },\r\n        },\r\n      };\r\n\r\n      // Lưu vào cache\r\n      this.cache.attendanceStats.set(cacheKey, {\r\n        data: result,\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error(\r\n        `Lỗi khi lấy thống kê điểm danh cho lớp ${classId}:`,\r\n        error\r\n      );\r\n      return {\r\n        success: false,\r\n        error:\r\n          error.response?.data?.message || \"Lỗi khi lấy thống kê điểm danh\",\r\n        data: {\r\n          logs: [],\r\n          stats: {\r\n            total: 0,\r\n            present: 0,\r\n            absent: 0,\r\n            late: 0,\r\n            presentPercentage: 0,\r\n            latePercentage: 0,\r\n            absentPercentage: 0,\r\n            attendanceRate: 0,\r\n          },\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lấy chi tiết điểm danh của sinh viên trong một lớp học\r\n   * @param {string} studentId - ID của sinh viên\r\n   * @param {string} classId - ID của lớp học\r\n   * @param {string} token - JWT token\r\n   * @param {Object} options - Các tùy chọn tìm kiếm và phân trang\r\n   * @returns {Promise} - Kết quả chi tiết điểm danh\r\n   */\r\n  async getAttendanceDetails(studentId, classId, token, options = {}) {\r\n    try {\r\n      const {\r\n        page = 1,\r\n        limit = 10,\r\n        sortBy = \"date\",\r\n        sortOrder = \"desc\",\r\n        skipCache = false,\r\n      } = options;\r\n\r\n      // Tạo khóa cache\r\n      const cacheKey = this._createCacheKey([\r\n        \"details\",\r\n        studentId,\r\n        classId,\r\n        page,\r\n        limit,\r\n        sortBy,\r\n        sortOrder,\r\n      ]);\r\n\r\n      // Kiểm tra cache nếu không yêu cầu bỏ qua\r\n      if (!skipCache) {\r\n        const cachedData = this.cache.attendanceDetails.get(cacheKey);\r\n        if (this._isCacheValid(cachedData)) {\r\n          return cachedData.data;\r\n        }\r\n      }\r\n\r\n      // Sử dụng URLSearchParams để xây dựng URL\r\n      const params = new URLSearchParams({\r\n        teaching_class: classId,\r\n        page: page.toString(),\r\n        limit: limit.toString(),\r\n        sort: sortBy,\r\n        order: sortOrder,\r\n      });\r\n\r\n      const url = `${API_URL}/attendance/student/${studentId}/logs?${params.toString()}`;\r\n\r\n      const response = await axios.get(url, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      const result = {\r\n        success: true,\r\n        data: response.data.data || [],\r\n        total: response.data.count || 0,\r\n      };\r\n\r\n      // Lưu vào cache\r\n      this.cache.attendanceDetails.set(cacheKey, {\r\n        data: result,\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error(\r\n        `Lỗi khi lấy chi tiết điểm danh cho lớp ${classId}:`,\r\n        error\r\n      );\r\n      return {\r\n        success: false,\r\n        error:\r\n          error.response?.data?.message || \"Lỗi khi lấy chi tiết điểm danh\",\r\n        data: [],\r\n        total: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Xóa cache cho một sinh viên cụ thể\r\n   * @param {string} studentId - ID của sinh viên\r\n   */\r\n  clearCache(studentId) {\r\n    // Xóa tất cả cache liên quan đến sinh viên này\r\n    for (const [key, cache] of Object.entries(this.cache)) {\r\n      for (const cacheKey of cache.keys()) {\r\n        if (cacheKey.includes(studentId)) {\r\n          cache.delete(cacheKey);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tính điểm chuyên cần dựa trên số buổi vắng\r\n   * @param {number} absences - Số buổi vắng\r\n   * @returns {number} - Điểm chuyên cần (thang điểm 10)\r\n   */\r\n  calculateAttendanceScore(absences) {\r\n    // Trừ 2 điểm cho mỗi buổi vắng, tối đa 10 điểm\r\n    const score = Math.max(0, 10 - absences * 2);\r\n    return parseFloat(score.toFixed(1)); // Làm tròn đến 1 chữ số thập phân hiệu quả hơn\r\n  }\r\n\r\n  /**\r\n   * Xác định trạng thái điểm danh dựa trên tỷ lệ tham gia\r\n   * @param {Object} stats - Thống kê điểm danh\r\n   * @returns {Object} - Trạng thái tham gia và thông báo\r\n   */\r\n  getAttendanceStatus(stats) {\r\n    const rate = stats.attendanceRate || 0;\r\n\r\n    if (rate >= 80) {\r\n      return { status: \"success\", message: \"Tốt\" };\r\n    } else if (rate >= 60) {\r\n      return { status: \"warning\", message: \"Cần cải thiện\" };\r\n    } else {\r\n      return { status: \"error\", message: \"Nguy hiểm\" };\r\n    }\r\n  }\r\n}\r\n\r\nexport default new StudentService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}