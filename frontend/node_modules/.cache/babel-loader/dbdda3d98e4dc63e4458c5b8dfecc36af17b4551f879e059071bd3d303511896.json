{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { denseBlock3 } from './denseBlock';\nimport { extractParamsFromWeigthMapTiny } from './extractParamsFromWeigthMapTiny';\nimport { extractParamsTiny } from './extractParamsTiny';\nvar TinyFaceFeatureExtractor = /** @class */function (_super) {\n  __extends(TinyFaceFeatureExtractor, _super);\n  function TinyFaceFeatureExtractor() {\n    return _super.call(this, 'TinyFaceFeatureExtractor') || this;\n  }\n  TinyFaceFeatureExtractor.prototype.forwardInput = function (input) {\n    var params = this.params;\n    if (!params) {\n      throw new Error('TinyFaceFeatureExtractor - load model before inference');\n    }\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255));\n      var out = denseBlock3(normalized, params.dense0, true);\n      out = denseBlock3(out, params.dense1);\n      out = denseBlock3(out, params.dense2);\n      out = tf.avgPool(out, [14, 14], [2, 2], 'valid');\n      return out;\n    });\n  };\n  TinyFaceFeatureExtractor.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  TinyFaceFeatureExtractor.prototype.getDefaultModelName = function () {\n    return 'face_feature_extractor_tiny_model';\n  };\n  TinyFaceFeatureExtractor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMapTiny(weightMap);\n  };\n  TinyFaceFeatureExtractor.prototype.extractParams = function (weights) {\n    return extractParamsTiny(weights);\n  };\n  return TinyFaceFeatureExtractor;\n}(NeuralNetwork);\nexport { TinyFaceFeatureExtractor };\n//# sourceMappingURL=TinyFaceFeatureExtractor.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}