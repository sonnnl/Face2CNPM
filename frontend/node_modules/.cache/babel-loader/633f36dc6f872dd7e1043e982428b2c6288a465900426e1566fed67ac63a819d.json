{"ast":null,"code":"import axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Kiểm tra token đã hết hạn hay chưa\nconst isTokenExpired = token => {\n  if (!token) return true;\n  try {\n    const decoded = jwtDecode(token);\n    return decoded.exp < Date.now() / 1000;\n  } catch (error) {\n    console.error(\"Token decode error:\", error);\n    return true;\n  }\n};\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  // Thêm timeout để tránh request treo\n  timeout: 15000 // 15 giây\n});\n\n// Thêm interceptor để tự động thêm token vào header\naxiosInstance.interceptors.request.use(config => {\n  // Đừng tự thêm token cho các request đăng nhập, đăng ký\n  const isAuthRequest = config.url.includes(\"/auth/login\") || config.url.includes(\"/auth/register\");\n  if (!isAuthRequest) {\n    const token = localStorage.getItem(\"token\");\n    if (token && !isTokenExpired(token)) {\n      config.headers.Authorization = `Bearer ${token}`;\n    } else if (token && isTokenExpired(token)) {\n      // Xóa token hết hạn\n      localStorage.removeItem(\"token\");\n      // Nếu không trong trang đăng nhập, chuyển hướng\n      if (!window.location.pathname.includes(\"/login\")) {\n        window.location.href = \"/login?expired=true\";\n      }\n    }\n  }\n\n  // Thêm header cho yêu cầu API\n  config.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n  return config;\n}, error => Promise.reject(error));\n\n// Thêm interceptor để xử lý lỗi response\naxiosInstance.interceptors.response.use(response => response, error => {\n  // Xử lý lỗi network\n  if (!error.response) {\n    console.error(\"Network Error:\", error.message);\n    if (error.code === \"ECONNABORTED\") {\n      return Promise.reject(new Error(\"Yêu cầu đã hết thời gian chờ. Vui lòng thử lại.\"));\n    }\n    return Promise.reject(new Error(\"Không thể kết nối đến máy chủ. Vui lòng kiểm tra kết nối mạng.\"));\n  }\n\n  // Không tự động đăng xuất nếu lỗi là từ đăng nhập/đăng ký\n  const isAuthRequest = error.config.url.includes(\"/auth/login\") || error.config.url.includes(\"/auth/register\");\n\n  // Xử lý lỗi 401 Unauthorized chỉ khi KHÔNG PHẢI từ request đăng nhập\n  if (error.response.status === 401 && !isAuthRequest) {\n    // Đã hết hạn token hoặc không xác thực, đăng xuất\n    localStorage.removeItem(\"token\");\n\n    // Không reload trang nếu đang ở trang login\n    if (!window.location.pathname.includes(\"/login\")) {\n      window.location.href = \"/login?expired=true\";\n    }\n  }\n\n  // Xử lý lỗi 403 Forbidden\n  if (error.response.status === 403) {\n    console.error(\"Forbidden:\", error.response.data.message);\n  }\n\n  // Xử lý lỗi 500 Server Error\n  if (error.response.status >= 500) {\n    return Promise.reject(new Error(\"Lỗi máy chủ. Vui lòng thử lại sau.\"));\n  }\n\n  // Trả về lỗi response mặc định\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","jwtDecode","API_URL","process","env","REACT_APP_API_URL","isTokenExpired","token","decoded","exp","Date","now","error","console","axiosInstance","create","baseURL","headers","timeout","interceptors","request","use","config","isAuthRequest","url","includes","localStorage","getItem","Authorization","removeItem","window","location","pathname","href","Promise","reject","response","message","code","Error","status","data"],"sources":["C:/Users/kasiz/Documents/Studying/FaceReg/frontend/src/utils/axios.js"],"sourcesContent":["import axios from \"axios\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// Kiểm tra token đã hết hạn hay chưa\r\nconst isTokenExpired = (token) => {\r\n  if (!token) return true;\r\n\r\n  try {\r\n    const decoded = jwtDecode(token);\r\n    return decoded.exp < Date.now() / 1000;\r\n  } catch (error) {\r\n    console.error(\"Token decode error:\", error);\r\n    return true;\r\n  }\r\n};\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  // Thêm timeout để tránh request treo\r\n  timeout: 15000, // 15 giây\r\n});\r\n\r\n// Thêm interceptor để tự động thêm token vào header\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    // Đừng tự thêm token cho các request đăng nhập, đăng ký\r\n    const isAuthRequest =\r\n      config.url.includes(\"/auth/login\") ||\r\n      config.url.includes(\"/auth/register\");\r\n\r\n    if (!isAuthRequest) {\r\n      const token = localStorage.getItem(\"token\");\r\n      if (token && !isTokenExpired(token)) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      } else if (token && isTokenExpired(token)) {\r\n        // Xóa token hết hạn\r\n        localStorage.removeItem(\"token\");\r\n        // Nếu không trong trang đăng nhập, chuyển hướng\r\n        if (!window.location.pathname.includes(\"/login\")) {\r\n          window.location.href = \"/login?expired=true\";\r\n        }\r\n      }\r\n    }\r\n\r\n    // Thêm header cho yêu cầu API\r\n    config.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\r\n\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Thêm interceptor để xử lý lỗi response\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // Xử lý lỗi network\r\n    if (!error.response) {\r\n      console.error(\"Network Error:\", error.message);\r\n      if (error.code === \"ECONNABORTED\") {\r\n        return Promise.reject(\r\n          new Error(\"Yêu cầu đã hết thời gian chờ. Vui lòng thử lại.\")\r\n        );\r\n      }\r\n      return Promise.reject(\r\n        new Error(\r\n          \"Không thể kết nối đến máy chủ. Vui lòng kiểm tra kết nối mạng.\"\r\n        )\r\n      );\r\n    }\r\n\r\n    // Không tự động đăng xuất nếu lỗi là từ đăng nhập/đăng ký\r\n    const isAuthRequest =\r\n      error.config.url.includes(\"/auth/login\") ||\r\n      error.config.url.includes(\"/auth/register\");\r\n\r\n    // Xử lý lỗi 401 Unauthorized chỉ khi KHÔNG PHẢI từ request đăng nhập\r\n    if (error.response.status === 401 && !isAuthRequest) {\r\n      // Đã hết hạn token hoặc không xác thực, đăng xuất\r\n      localStorage.removeItem(\"token\");\r\n\r\n      // Không reload trang nếu đang ở trang login\r\n      if (!window.location.pathname.includes(\"/login\")) {\r\n        window.location.href = \"/login?expired=true\";\r\n      }\r\n    }\r\n\r\n    // Xử lý lỗi 403 Forbidden\r\n    if (error.response.status === 403) {\r\n      console.error(\"Forbidden:\", error.response.data.message);\r\n    }\r\n\r\n    // Xử lý lỗi 500 Server Error\r\n    if (error.response.status >= 500) {\r\n      return Promise.reject(new Error(\"Lỗi máy chủ. Vui lòng thử lại sau.\"));\r\n    }\r\n\r\n    // Trả về lỗi response mặc định\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}